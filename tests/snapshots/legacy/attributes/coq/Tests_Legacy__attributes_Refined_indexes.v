(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)



Definition v_MAX : t_usize :=
  (10 : t_usize).

Record MyArray_record : Type :=
  {
    MyArray_0 : t_Array (t_u8) ((10 : t_usize));
  }.


#[export] Instance settable_MyArray_record : Settable _ :=
  settable! (Build_MyArray_record) <MyArray_0>.
Notation "'MyArray_MyArray_record'" := Build_MyArray_record.

Definition mutation_example (uuse_generic_update_at : t_MyArray) (uuse_specialized_update_at : t_Slice t_u8) (specialized_as_well : t_Vec ((t_u8)) ((t_Global))) : (t_MyArray*t_Slice t_u8*t_Vec ((t_u8)) ((t_Global))) :=
  let uuse_generic_update_at := update_at (uuse_generic_update_at) ((2 : t_usize)) ((0 : t_u8)) in
  let uuse_specialized_update_at := update_at_usize (uuse_specialized_update_at) ((2 : t_usize)) ((0 : t_u8)) in
  let specialized_as_well := update_at_usize (specialized_as_well) ((2 : t_usize)) ((0 : t_u8)) in
  (uuse_generic_update_at,uuse_specialized_update_at,specialized_as_well).

Instance t_Index_792754414 : t_Index ((t_MyArray)) ((t_usize)) :=
  {
    implaabbcc_t_Index_f_Output := t_u8;
    implaabbcc_t_Index_f_index := fun  (self : t_MyArray) (index : t_usize)=>
      f_index (self) (index);
  }.
