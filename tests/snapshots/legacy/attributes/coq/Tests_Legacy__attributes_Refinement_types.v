(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)



(* NotImplementedYet *)



Record BoundedU8_record (v_MIN : t_u8) (v_MAX : t_u8) : Type :=
  {
    BoundedU8_0 : t_u8;
  }.
Arguments Build_BoundedU8_record {_} {_}.
Arguments BoundedU8_0 {_} {_}.
#[export] Instance settable_BoundedU8_record `{v_MIN : t_u8} `{v_MAX : t_u8} : Settable _ :=
  settable! (Build_BoundedU8_record (v_MIN := v_MIN) (v_MAX := v_MAX)) <BoundedU8_0>.
Notation "'BoundedU8_BoundedU8_record'" := Build_BoundedU8_record.



Definition bounded_u8 (x : t_BoundedU8 ((12 : t_u8)) ((15 : t_u8))) (y : t_BoundedU8 ((10 : t_u8)) ((11 : t_u8))) : t_BoundedU8 ((1 : t_u8)) ((23 : t_u8)) :=
  f_new (f_add (f_get (x)) (f_get (y))).

(* NotImplementedYet *)



Record Even_record : Type :=
  {
    Even_0 : t_u8;
  }.


#[export] Instance settable_Even_record : Settable _ :=
  settable! (Build_Even_record) <Even_0>.
Notation "'Even_Even_record'" := Build_Even_record.



Definition double (x : t_u8) `{f_lt (x) ((127 : t_u8)) = true} : t_Even :=
  f_new (f_add (x) (x)).

Definition double_refine (x : t_u8) `{f_lt (x) ((127 : t_u8)) = true} : t_Even :=
  f_into_checked (f_add (x) (x)).

(* NotImplementedYet *)



Record NoE_record : Type :=
  {
    NoE_0 : t_String;
  }.


#[export] Instance settable_NoE_record : Settable _ :=
  settable! (Build_NoE_record) <NoE_0>.
Notation "'NoE_NoE_record'" := Build_NoE_record.



(* NotImplementedYet *)



Record ModInverse_record (v_MOD : t_u32) : Type :=
  {
    ModInverse_0 : t_u32;
  }.
Arguments Build_ModInverse_record {_}.
Arguments ModInverse_0 {_}.
#[export] Instance settable_ModInverse_record `{v_MOD : t_u32} : Settable _ :=
  settable! (Build_ModInverse_record (v_MOD := v_MOD)) <ModInverse_0>.
Notation "'ModInverse_ModInverse_record'" := Build_ModInverse_record.



(* NotImplementedYet *)



Record FieldElement_record : Type :=
  {
    FieldElement_0 : t_u16;
  }.


#[export] Instance settable_FieldElement_record : Settable _ :=
  settable! (Build_FieldElement_record) <FieldElement_0>.
Notation "'FieldElement_FieldElement_record'" := Build_FieldElement_record.



(* NotImplementedYet *)



Record CompressionFactor_record : Type :=
  {
    CompressionFactor_0 : t_u8;
  }.


#[export] Instance settable_CompressionFactor_record : Settable _ :=
  settable! (Build_CompressionFactor_record) <CompressionFactor_0>.
Notation "'CompressionFactor_CompressionFactor_record'" := Build_CompressionFactor_record.





(* NotImplementedYet *)



Record BoundedAbsI16_record (v_B : t_usize) : Type :=
  {
    BoundedAbsI16_0 : t_i16;
  }.
Arguments Build_BoundedAbsI16_record {_}.
Arguments BoundedAbsI16_0 {_}.
#[export] Instance settable_BoundedAbsI16_record `{v_B : t_usize} : Settable _ :=
  settable! (Build_BoundedAbsI16_record (v_B := v_B)) <BoundedAbsI16_0>.
Notation "'BoundedAbsI16_BoundedAbsI16_record'" := Build_BoundedAbsI16_record.



















Definition double_abs_i16 `{v_N : t_usize} `{v_M : t_usize} (x : t_BoundedAbsI16 (v_N)) `{andb (f_lt (f_lift (v_M)) (impl_Int__e_unsafe_from_str (("32768"%string : string)))) (f_eq (f_lift (v_M)) (f_mul (f_lift (v_N)) (impl_Int__e_unsafe_from_str (("2"%string : string))))) = true} : t_BoundedAbsI16 (v_M) :=
  f_into_checked (f_mul (x) ((2 : t_i16))).
