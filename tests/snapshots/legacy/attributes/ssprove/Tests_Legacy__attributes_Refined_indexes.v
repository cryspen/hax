(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations v_MAX : both uint_size :=
  v_MAX  :=
    ret_both (10 : uint_size) : both uint_size.
Fail Next Obligation.

Definition t_MyArray : choice_type :=
  (nseq int8 10).
Equations 0 (s : both t_MyArray) : both (nseq int8 10) :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : (nseq int8 10))) : both (nseq int8 10).
Fail Next Obligation.
Equations Build_t_MyArray {0 : both (nseq int8 10)} : both (t_MyArray) :=
  Build_t_MyArray  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_MyArray))) : both (t_MyArray).
Fail Next Obligation.
Notation "'Build_t_MyArray' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_MyArray (0 := y)).

Equations mutation_example (uuse_generic_update_at : both t_MyArray) (uuse_specialized_update_at : both (seq int8)) (specialized_as_well : both (t_Vec int8 t_Global)) : both (t_MyArray × seq int8 × t_Vec int8 t_Global) :=
  mutation_example uuse_generic_update_at uuse_specialized_update_at specialized_as_well  :=
    letb uuse_generic_update_at := update_at uuse_generic_update_at (ret_both (2 : uint_size)) (ret_both (0 : int8)) in
    letb uuse_specialized_update_at := update_at_usize uuse_specialized_update_at (ret_both (2 : uint_size)) (ret_both (0 : int8)) in
    letb specialized_as_well := update_at_usize specialized_as_well (ret_both (2 : uint_size)) (ret_both (0 : int8)) in
    prod_b (uuse_generic_update_at,uuse_specialized_update_at,specialized_as_well) : both (t_MyArray × seq int8 × t_Vec int8 t_Global).
Fail Next Obligation.

#[global] Program Instance t_MyArray_t_Index : t_Index t_MyArray uint_size :=
  let f_Output := int8 : choice_type in
  let f_index := fun  (self : both t_MyArray) (index : both uint_size) => self.a[index] : both int8 in
  {| f_Output := (@f_Output);
  f_index := (@f_index)|}.
Fail Next Obligation.
Hint Unfold t_MyArray_t_Index.
