(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Foo : choice_type :=
  (int8).
Equations 0 (s : both t_Foo) : both int8 :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_Foo {0 : both int8} : both (t_Foo) :=
  Build_t_Foo  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_Foo))) : both (t_Foo).
Fail Next Obligation.
Notation "'Build_t_Foo' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Foo (0 := y)).

#[global] Program Instance t_Foo_t_Add : t_Add t_Foo t_Foo :=
  let f_Output := t_Foo : choice_type in
  let f_add := fun  (self : both t_Foo) (rhs : both t_Foo) => Foo ((0 self) .+ (0 rhs)) : both t_Foo in
  {| f_Output := (@f_Output);
  f_add := (@f_add)|}.
Fail Next Obligation.
Hint Unfold t_Foo_t_Add.

#[global] Program Instance t_Foo_t_Mul : t_Mul t_Foo t_Foo :=
  let f_Output := t_Foo : choice_type in
  let f_mul := fun  (self : both t_Foo) (rhs : both t_Foo) => Foo ((0 self) .* (0 rhs)) : both t_Foo in
  {| f_Output := (@f_Output);
  f_mul := (@f_mul)|}.
Fail Next Obligation.
Hint Unfold t_Foo_t_Mul.
