(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Foo : choice_type :=
  (int8 × int8 × int8 × int8).
Equations f_field_1_ (s : both t_Foo) : both int8 :=
  f_field_1_ s  :=
    bind_both s (fun x =>
      ret_both (fst (fst (fst x)) : int8)) : both int8.
Fail Next Obligation.
Equations f_field_2_ (s : both t_Foo) : both int8 :=
  f_field_2_ s  :=
    bind_both s (fun x =>
      ret_both (snd (fst (fst x)) : int8)) : both int8.
Fail Next Obligation.
Equations f_field_3_ (s : both t_Foo) : both int8 :=
  f_field_3_ s  :=
    bind_both s (fun x =>
      ret_both (snd (fst x) : int8)) : both int8.
Fail Next Obligation.
Equations f_field_4_ (s : both t_Foo) : both int8 :=
  f_field_4_ s  :=
    bind_both s (fun x =>
      ret_both (snd x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_Foo {f_field_1_ : both int8} {f_field_2_ : both int8} {f_field_3_ : both int8} {f_field_4_ : both int8} : both (t_Foo) :=
  Build_t_Foo  :=
    bind_both f_field_4_ (fun f_field_4_ =>
      bind_both f_field_3_ (fun f_field_3_ =>
        bind_both f_field_2_ (fun f_field_2_ =>
          bind_both f_field_1_ (fun f_field_1_ =>
            ret_both ((f_field_1_,f_field_2_,f_field_3_,f_field_4_) : (t_Foo)))))) : both (t_Foo).
Fail Next Obligation.
Notation "'Build_t_Foo' '[' x ']' '(' 'f_field_1_' ':=' y ')'" := (Build_t_Foo (f_field_1_ := y) (f_field_2_ := f_field_2_ x) (f_field_3_ := f_field_3_ x) (f_field_4_ := f_field_4_ x)).
Notation "'Build_t_Foo' '[' x ']' '(' 'f_field_2_' ':=' y ')'" := (Build_t_Foo (f_field_1_ := f_field_1_ x) (f_field_2_ := y) (f_field_3_ := f_field_3_ x) (f_field_4_ := f_field_4_ x)).
Notation "'Build_t_Foo' '[' x ']' '(' 'f_field_3_' ':=' y ')'" := (Build_t_Foo (f_field_1_ := f_field_1_ x) (f_field_2_ := f_field_2_ x) (f_field_3_ := y) (f_field_4_ := f_field_4_ x)).
Notation "'Build_t_Foo' '[' x ']' '(' 'f_field_4_' ':=' y ')'" := (Build_t_Foo (f_field_1_ := f_field_1_ x) (f_field_2_ := f_field_2_ x) (f_field_3_ := f_field_3_ x) (f_field_4_ := y)).

(*item error backend*)
