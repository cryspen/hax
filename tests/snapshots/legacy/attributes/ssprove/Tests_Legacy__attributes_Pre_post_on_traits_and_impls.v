(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Class t_Operation (Self : choice_type) (v_Self : v_Self) := {
  f_double : (both int8 -> both int8) ;
}.

Definition t_ViaAdd : choice_type :=
  'unit.
Equations Build_t_ViaAdd : both (t_ViaAdd) :=
  Build_t_ViaAdd  :=
    ret_both (tt (* Empty tuple *) : (t_ViaAdd)) : both (t_ViaAdd).
Fail Next Obligation.

Definition t_ViaMul : choice_type :=
  'unit.
Equations Build_t_ViaMul : both (t_ViaMul) :=
  Build_t_ViaMul  :=
    ret_both (tt (* Empty tuple *) : (t_ViaMul)) : both (t_ViaMul).
Fail Next Obligation.

#[global] Program Instance t_ViaAdd_t_Operation : t_Operation t_ViaAdd :=
  let f_double := fun  (x : both int8) => x .+ x : both int8 in
  {| f_double := (@f_double)|}.
Fail Next Obligation.
Hint Unfold t_ViaAdd_t_Operation.

#[global] Program Instance t_ViaMul_t_Operation : t_Operation t_ViaMul :=
  let f_double := fun  (x : both int8) => x .* (ret_both (2 : int8)) : both int8 in
  {| f_double := (@f_double)|}.
Fail Next Obligation.
Hint Unfold t_ViaMul_t_Operation.

Class t_TraitWithRequiresAndEnsures (Self : choice_type) (v_Self : v_Self) := {
  f_method : (both v_Self -> both int8 -> both int8) ;
}.

Equations test {v_T : v_T} `{ t_TraitWithRequiresAndEnsures v_T} (x : both v_T) : both int8 :=
  test x  :=
    (f_method x (ret_both (99 : int8))) .- (ret_both (88 : int8)) : both int8.
Fail Next Obligation.
