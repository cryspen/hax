(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations increment_array (v : both (nseq int8 4)) : both (nseq int8 4) :=
  increment_array v  :=
    letb v := update_at_usize v (ret_both (0 : uint_size)) ((v.a[(ret_both (0 : uint_size))]) .+ (ret_both (1 : int8))) in
    letb v := update_at_usize v (ret_both (1 : uint_size)) ((v.a[(ret_both (1 : uint_size))]) .+ (ret_both (1 : int8))) in
    letb v := update_at_usize v (ret_both (2 : uint_size)) ((v.a[(ret_both (2 : uint_size))]) .+ (ret_both (1 : int8))) in
    letb v := update_at_usize v (ret_both (3 : uint_size)) ((v.a[(ret_both (3 : uint_size))]) .+ (ret_both (1 : int8))) in
    v : both (nseq int8 4).
Fail Next Obligation.
