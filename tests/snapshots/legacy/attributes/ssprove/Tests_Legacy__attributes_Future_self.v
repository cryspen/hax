(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Dummy : choice_type :=
  'unit.
Equations Build_t_Dummy : both (t_Dummy) :=
  Build_t_Dummy  :=
    ret_both (tt (* Empty tuple *) : (t_Dummy)) : both (t_Dummy).
Fail Next Obligation.

#[global] Program Instance t_Dummy_t_StructuralPartialEq : t_StructuralPartialEq t_Dummy :=
  _.
Fail Next Obligation.
Hint Unfold t_Dummy_t_StructuralPartialEq.

#[global] Program Instance t_Dummy_t_PartialEq : t_PartialEq t_Dummy t_Dummy :=
  _.
Fail Next Obligation.
Hint Unfold t_Dummy_t_PartialEq.

#[global] Program Instance t_Dummy_t_Eq : t_Eq t_Dummy :=
  _.
Fail Next Obligation.
Hint Unfold t_Dummy_t_Eq.

Equations impl_Dummy__f (self : both t_Dummy) : both t_Dummy :=
  impl_Dummy__f self  :=
    self : both t_Dummy.
Fail Next Obligation.
