(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations a_function_which_only_laxes (_ : both 'unit) : both 'unit :=
  a_function_which_only_laxes _  :=
    assert (ret_both (false : 'bool)) : both 'unit.
Fail Next Obligation.

Equations a_panicfree_function (_ : both 'unit) : both int8 :=
  a_panicfree_function _  :=
    letb a := ret_both (3 : int8) in
    letb b := ret_both (6 : int8) in
    letb result := a .+ b in
    letb _ := ret_both (tt : 'unit) in
    result : both int8.
Fail Next Obligation.

Equations another_panicfree_function (_ : both 'unit) : both 'unit :=
  another_panicfree_function _  :=
    letb not_much := ret_both (0 : int32) in
    letb nothing := ret_both (0 : int32) in
    letb still_not_much := not_much .+ nothing in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
