(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations u32_max : both int32 :=
  u32_max  :=
    ret_both (90000 : int32) : both int32.
Fail Next Obligation.

Equations add3 (x : both int32) (y : both int32) (z : both int32) : both int32 :=
  add3 x y z  :=
    (x .+ y) .+ z : both int32.
Fail Next Obligation.

Equations swap_and_mut_req_ens (x : both int32) (y : both int32) : both (int32 × int32 × int32) :=
  swap_and_mut_req_ens x y  :=
    letb x0 := x in
    letb x := y in
    letb y := x0 in
    letb hax_temp_output := x .+ y in
    prod_b (x,y,hax_temp_output) : both (int32 × int32 × int32).
Fail Next Obligation.

Equations issue_844_ (e_x : both int8) : both int8 :=
  issue_844_ e_x  :=
    e_x : both int8.
Fail Next Obligation.

Lemma add3_lemma  (x : both int32) : orb (orb (x <=.? (ret_both (10 : int32))) (x >=.? (u32_max ./ (ret_both (3 : int32))))) ((add3 x x x) =.? (x .* (ret_both (3 : int32)))).

Equations dummy_function (x : both int32) : both int32 :=
  dummy_function x  :=
    x : both int32.
Fail Next Obligation.

Lemma apply_dummy_function_lemma  (x : both int32) : x =.? (dummy_function x).

Definition t_Foo : choice_type :=
  (int32 × int32 × int32).
Equations f_x (s : both t_Foo) : both int32 :=
  f_x s  :=
    bind_both s (fun x =>
      ret_both (fst (fst x) : int32)) : both int32.
Fail Next Obligation.
Equations f_y (s : both t_Foo) : both int32 :=
  f_y s  :=
    bind_both s (fun x =>
      ret_both (snd (fst x) : int32)) : both int32.
Fail Next Obligation.
Equations f_z (s : both t_Foo) : both int32 :=
  f_z s  :=
    bind_both s (fun x =>
      ret_both (snd x : int32)) : both int32.
Fail Next Obligation.
Equations Build_t_Foo {f_x : both int32} {f_y : both int32} {f_z : both int32} : both (t_Foo) :=
  Build_t_Foo  :=
    bind_both f_z (fun f_z =>
      bind_both f_y (fun f_y =>
        bind_both f_x (fun f_x =>
          ret_both ((f_x,f_y,f_z) : (t_Foo))))) : both (t_Foo).
Fail Next Obligation.
Notation "'Build_t_Foo' '[' x ']' '(' 'f_x' ':=' y ')'" := (Build_t_Foo (f_x := y) (f_y := f_y x) (f_z := f_z x)).
Notation "'Build_t_Foo' '[' x ']' '(' 'f_y' ':=' y ')'" := (Build_t_Foo (f_x := f_x x) (f_y := y) (f_z := f_z x)).
Notation "'Build_t_Foo' '[' x ']' '(' 'f_z' ':=' y ')'" := (Build_t_Foo (f_x := f_x x) (f_y := f_y x) (f_z := y)).

Equations props (_ : both 'unit) : both 'unit :=
  props _  :=
    letb _ := assume (f_from (impl_Prop__from_bool (ret_both (true : 'bool)))) in
    letb _ := assert_prop (f_from (impl_Prop__from_bool (ret_both (true : 'bool)))) in
    letb _ := ret_both (tt : 'unit) in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations inlined_code (foo : both t_Foo) : both 'unit :=
  inlined_code foo  :=
    letb vv_a := ret_both (13 : int32) in
    letb _ := ret_both (tt : 'unit) in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations inlined_code__v_V : both int8 :=
  inlined_code__v_V  :=
    ret_both (12 : int8) : both int8.
Fail Next Obligation.

Equations mutliple_before_after (_ : both 'unit) : both 'unit :=
  mutliple_before_after _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations fib (x : both uint_size) : both uint_size :=
  fib x  :=
    ifb x <=.? (ret_both (2 : uint_size))
    then x
    else impl_usize__wrapping_add (fib (x .- (ret_both (1 : uint_size)))) (fib (x .- (ret_both (2 : uint_size)))) : both uint_size.
Fail Next Obligation.
