(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Class t_Foo (Self : choice_type) (v_Self : v_Self) := {
  f_f : (both int8 -> both int8 -> both (int8 × int8)) ;
  f_g : (both int8 -> both int8 -> both int8) ;
  f_h : (both int8 -> both int8 -> both 'unit) ;
  f_i : (both int8 -> both int8 -> both int8) ;
}.

#[global] Program Instance 'unit_t_Foo : t_Foo 'unit :=
  let f_f := fun  (x : both int8) (y : both int8) => letb y := y .+ x in
  letb hax_temp_output := y in
  prod_b (y,hax_temp_output) : both (int8 × int8) in
  let f_g := fun  (x : both int8) (y : both int8) => y : both int8 in
  let f_h := fun  (x : both int8) (y : both int8) => ret_both (tt : 'unit) : both 'unit in
  let f_i := fun  (x : both int8) (y : both int8) => letb _ := ret_both (tt : 'unit) in
  y : both int8 in
  {| f_f := (@f_f);
  f_g := (@f_g);
  f_h := (@f_h);
  f_i := (@f_i)|}.
Fail Next Obligation.
Hint Unfold 'unit_t_Foo.
