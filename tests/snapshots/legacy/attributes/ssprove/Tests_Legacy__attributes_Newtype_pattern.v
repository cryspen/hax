(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations v_MAX : both uint_size :=
  v_MAX  :=
    ret_both (10 : uint_size) : both uint_size.
Fail Next Obligation.

Definition t_SafeIndex : choice_type :=
  (uint_size).
Equations f_i (s : both t_SafeIndex) : both uint_size :=
  f_i s  :=
    bind_both s (fun x =>
      ret_both (x : uint_size)) : both uint_size.
Fail Next Obligation.
Equations Build_t_SafeIndex {f_i : both uint_size} : both (t_SafeIndex) :=
  Build_t_SafeIndex  :=
    bind_both f_i (fun f_i =>
      ret_both ((f_i) : (t_SafeIndex))) : both (t_SafeIndex).
Fail Next Obligation.
Notation "'Build_t_SafeIndex' '[' x ']' '(' 'f_i' ':=' y ')'" := (Build_t_SafeIndex (f_i := y)).

Equations impl_SafeIndex__new (i : both uint_size) : both (t_Option t_SafeIndex) :=
  impl_SafeIndex__new i  :=
    ifb i <.? v_MAX
    then Option_Some (Build_t_SafeIndex (f_i := i))
    else Option_None : both (t_Option t_SafeIndex).
Fail Next Obligation.

Equations impl_SafeIndex__as_usize (self : both t_SafeIndex) : both uint_size :=
  impl_SafeIndex__as_usize self  :=
    f_i self : both uint_size.
Fail Next Obligation.

#[global] Program Instance nseq v_T 10_t_Index {v_T : v_T} : t_Index (nseq v_T 10) t_SafeIndex :=
  let f_Output := v_T : choice_type in
  let f_index := fun  (self : both (nseq v_T 10)) (index : both t_SafeIndex) => self.a[(f_i index)] : both v_T in
  {| f_Output := (@f_Output);
  f_index := (@f_index)|}.
Fail Next Obligation.
Hint Unfold nseq v_T 10_t_Index.
