(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_S : choice_type :=
  (int8).
Equations 0 (s : both t_S) : both int8 :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_S {0 : both int8} : both (t_S) :=
  Build_t_S  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_S))) : both (t_S).
Fail Next Obligation.
Notation "'Build_t_S' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_S (0 := y)).

Equations impl_S__f (self : both t_S) (self_ : both int8) (self_0_ : both int8) (self_1_ : both int8) (self_2_ : both int8) : both 'unit :=
  impl_S__f self self_ self_0_ self_1_ self_2_  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
