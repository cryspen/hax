(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations f (x : both int8) (y : both int8) : both int8 :=
  f x y  :=
    (ret_both (1 : int8)) .+ (ret_both (2 : int8)) : both int8.
Fail Next Obligation.

Definition t_Foo : choice_type :=
  'unit.
Equations Build_t_Foo : both (t_Foo) :=
  Build_t_Foo  :=
    ret_both (tt (* Empty tuple *) : (t_Foo)) : both (t_Foo).
Fail Next Obligation.

Equations impl_Foo__assoc_fn (self : both t_Foo) (x : both int8) : both 'unit :=
  impl_Foo__assoc_fn self x  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

#[global] Program Instance t_Foo_t_ToString : t_ToString t_Foo :=
  let f_to_string := fun  (self : both t_Foo) => f_into (ret_both (Hello : chString)) : both t_String in
  {| f_to_string := (@f_to_string)|}.
Fail Next Obligation.
Hint Unfold t_Foo_t_ToString.
