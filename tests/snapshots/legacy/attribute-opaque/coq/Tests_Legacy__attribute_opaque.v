(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

(Fatal error: something we considered as impossible occurred! Please report this by submitting an issue on GitHub!
Details: Unreachable


Note: the error was labeled with context `Coq printer generic printer`.
(* ERROR_ITEM *))
Inductive t_OpaqueEnum (v_X : t_usize) (v_T : Type) (v_U : Type) : Type :=
.

Definition ff_generic `{v_X : t_usize} `{v_T : Type} `{v_U : Type} (x : v_U) : t_OpaqueEnum (v_X) ((v_T)) ((v_U)) :=
  dropped_body.

Definition f (x : bool) (y : bool) : bool :=
  dropped_body.

Definition ff_pre_post (x : bool) (y : bool) `{x = true} : bool :=
  dropped_body.
Lemma ff_pre_post_ensures (x : bool) (y : bool) :
  forall (H_requires : x = true),
  let result := @ff_pre_post (x : bool)(y : bool) H_requires in
  f_eq (result) (y) = true.
Proof. Admitted.

Class t_T (v_Self : Type) : Type :=
  {
    f_U : Type;
    f_c : t_u8;
    f_d : unit -> unit;
    f_m : v_Self -> t_u8 -> bool;
  }.
Arguments t_T (_).



Class t_TrGeneric (v_Self : Type) (v_U : Type) `{t_Clone (v_U)} : Type :=
  {
    f_f : v_U -> v_Self;
  }.
Arguments t_TrGeneric (_) (_) {_}.



Definition v_C : t_u8 :=
  dropped_body.

Record S1_record : Type :=
  {
  }.

#[export]
Notation "'S1_S1_record'" := Build_S1_record.

Definition impl_S1__ff_s1 '(_ : unit) : unit :=
  dropped_body.

Record S2_record : Type :=
  {
  }.

#[export]
Notation "'S2_S2_record'" := Build_S2_record.

Definition impl_S2__ff_s2 '(_ : unit) : unit :=
  dropped_body.
