(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition other_fun (rng : t_i8) : (t_i8*t_Result ((unit)) ((unit))) :=
  let hax_temp_output := Result_Ok (tt) in
  (rng,hax_temp_output).

Definition fun (rng : t_i8) : (t_i8*t_Result ((unit)) ((unit))) :=
  run (let (tmp0,out) := other_fun (rng) in
  let rng := tmp0 in
  let hoist41 := out in
  let hoist42 := f_branch (hoist41) in
  let hoist43 := match hoist42 with
  | ControlFlow_Break (residual) =>
    let hoist40 := ControlFlow_Break ((rng,f_from_residual (residual))) in
    ControlFlow_Continue (never_to_any (hoist40))
  | ControlFlow_Continue (val) =>
    ControlFlow_Continue (val)
  end in
  let hoist44 := Result_Ok (hoist43) in
  let hoist45 := (rng,hoist44) in
  let hoist46 := ControlFlow_Break (hoist45) in
  ControlFlow_Continue (let hax_temp_output := never_to_any (hoist46) in
  (rng,hax_temp_output))).
