(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_A : choice_type :=
  (uint_size Ã— int8).
Equations f_x (s : both t_A) : both uint_size :=
  f_x s  :=
    bind_both s (fun x =>
      ret_both (fst x : uint_size)) : both uint_size.
Fail Next Obligation.
Equations f_y (s : both t_A) : both int8 :=
  f_y s  :=
    bind_both s (fun x =>
      ret_both (snd x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_A {f_x : both uint_size} {f_y : both int8} : both (t_A) :=
  Build_t_A  :=
    bind_both f_y (fun f_y =>
      bind_both f_x (fun f_x =>
        ret_both ((f_x,f_y) : (t_A)))) : both (t_A).
Fail Next Obligation.
Notation "'Build_t_A' '[' x ']' '(' 'f_x' ':=' y ')'" := (Build_t_A (f_x := y) (f_y := f_y x)).
Notation "'Build_t_A' '[' x ']' '(' 'f_y' ':=' y ')'" := (Build_t_A (f_x := f_x x) (f_y := y)).

Definition t_B : choice_type :=
  ('bool).
Equations f_b (s : both t_B) : both 'bool :=
  f_b s  :=
    bind_both s (fun x =>
      ret_both (x : 'bool)) : both 'bool.
Fail Next Obligation.
Equations Build_t_B {f_b : both 'bool} : both (t_B) :=
  Build_t_B  :=
    bind_both f_b (fun f_b =>
      ret_both ((f_b) : (t_B))) : both (t_B).
Fail Next Obligation.
Notation "'Build_t_B' '[' x ']' '(' 'f_b' ':=' y ')'" := (Build_t_B (f_b := y)).

Equations some_function (_ : both 'unit) : both 'bool :=
  some_function _  :=
    ret_both (true : 'bool) : both 'bool.
Fail Next Obligation.

Equations some_other_function (b : both 'bool) : both int8 :=
  some_other_function b  :=
    ret_both (5 : int8) : both int8.
Fail Next Obligation.

Equations longer_function (x : both chString) : both t_A :=
  longer_function x  :=
    letb b := some_function in
    letb d := some_other_function b in
    Build_t_A (f_x := ret_both (12 : uint_size)) (f_y := ret_both (9 : int8)) : both t_A.
Fail Next Obligation.

Equations another_longer_function (_ : both 'unit) : both t_B :=
  another_longer_function _  :=
    letb b := some_function in
    letb d := some_other_function b in
    Build_t_B (f_b := ret_both (false : 'bool)) : both t_B.
Fail Next Obligation.

Equations void_function (_ : both 'unit) : both 'unit :=
  void_function _  :=
    letb b := some_function in
    letb d := some_other_function b in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
