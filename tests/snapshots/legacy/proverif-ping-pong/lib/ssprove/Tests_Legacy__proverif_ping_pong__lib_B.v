(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_B0 : choice_type :=
  'unit.
Equations Build_t_B0 : both (t_B0) :=
  Build_t_B0  :=
    ret_both (tt (* Empty tuple *) : (t_B0)) : both (t_B0).
Fail Next Obligation.

Definition t_B1 : choice_type :=
  (int8).
Equations f_received (s : both t_B1) : both int8 :=
  f_received s  :=
    bind_both s (fun x =>
      ret_both (x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_B1 {f_received : both int8} : both (t_B1) :=
  Build_t_B1  :=
    bind_both f_received (fun f_received =>
      ret_both ((f_received) : (t_B1))) : both (t_B1).
Fail Next Obligation.
Notation "'Build_t_B1' '[' x ']' '(' 'f_received' ':=' y ')'" := (Build_t_B1 (f_received := y)).

Definition t_B1alt : choice_type :=
  'unit.
Equations Build_t_B1alt : both (t_B1alt) :=
  Build_t_B1alt  :=
    ret_both (tt (* Empty tuple *) : (t_B1alt)) : both (t_B1alt).
Fail Next Obligation.

Definition t_B2 : choice_type :=
  'unit.
Equations Build_t_B2 : both (t_B2) :=
  Build_t_B2  :=
    ret_both (tt (* Empty tuple *) : (t_B2)) : both (t_B2).
Fail Next Obligation.

Equations init_b (_ : both 'unit) : both (t_Result t_B0 t_ProtocolError) :=
  init_b _  :=
    Result_Ok B0 : both (t_Result t_B0 t_ProtocolError).
Fail Next Obligation.

Equations read_ping (e_state : both t_B0) (msg : both t_Message) : both (t_Result t_B1 t_ProtocolError) :=
  read_ping e_state msg  :=
    matchb msg with
    | Message_Ping_case received =>
      letb received := ret_both ((received) : (int8)) in
      Result_Ok (Build_t_B1 (f_received := received))
    | Message_Pong_case _ =>
      letb _ := ret_both (tt (* Empty tuple *) : (int8)) in
      Result_Err ProtocolError_InvalidMessage
    end : both (t_Result t_B1 t_ProtocolError).
Fail Next Obligation.

Equations read_ping_alt (e_state : both t_B0) (msg : both t_Message) : both (t_Result t_B1alt t_ProtocolError) :=
  read_ping_alt e_state msg  :=
    matchb matchb msg with
    | Message_Ping_case received =>
      letb received := ret_both ((received) : (int8)) in
      matchb received =.? (ret_both (42 : int8)) with
      | true =>
        Option_Some (Result_Ok B1alt)
      | _ =>
        Option_None
      end
    | _ =>
      Option_None
    end with
    | Option_Some_case x =>
      letb x := ret_both ((x) : (t_Result t_B1alt t_ProtocolError)) in
      x
    | Option_None_case  =>
      Result_Err ProtocolError_InvalidMessage
    end : both (t_Result t_B1alt t_ProtocolError).
Fail Next Obligation.

Equations write_pong (state : both t_B1) : both (t_Result (t_B2 × t_Message) t_ProtocolError) :=
  write_pong state  :=
    Result_Ok (prod_b (B2,Message_Pong (f_received state))) : both (t_Result (t_B2 × t_Message) t_ProtocolError).
Fail Next Obligation.
