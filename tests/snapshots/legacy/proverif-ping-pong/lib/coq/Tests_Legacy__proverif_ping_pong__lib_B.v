(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)











Record B0_record : Type :=
  {
  }.

#[export]
Notation "'B0_B0_record'" := Build_B0_record.

Record B1_record : Type :=
  {
    B1_f_received : t_u8;
  }.


#[export] Instance settable_B1_record : Settable _ :=
  settable! (Build_B1_record) <B1_f_received>.

Record B1alt_record : Type :=
  {
  }.

#[export]
Notation "'B1alt_B1alt_record'" := Build_B1alt_record.

Record B2_record : Type :=
  {
  }.

#[export]
Notation "'B2_B2_record'" := Build_B2_record.

Definition init_b '(_ : unit) : t_Result ((t_B0)) ((t_ProtocolError)) :=
  Result_Ok (B0).

Definition read_ping (e_state : t_B0) (msg : t_Message) : t_Result ((t_B1)) ((t_ProtocolError)) :=
  match msg with
  | Message_Ping (received) =>
    Result_Ok (B1 (received))
  | Message_Pong (_) =>
    Result_Err (ProtocolError_InvalidMessage)
  end.

Definition read_ping_alt (e_state : t_B0) (msg : t_Message) : t_Result ((t_B1alt)) ((t_ProtocolError)) :=
  match match msg with
  | Message_Ping (received) =>
    match f_eq (received) ((42 : t_u8)) with
    | true =>
      Option_Some (Result_Ok (B1alt))
    | _ =>
      Option_None
    end
  | _ =>
    Option_None
  end with
  | Option_Some (x) =>
    x
  | Option_None =>
    Result_Err (ProtocolError_InvalidMessage)
  end.

Definition write_pong (state : t_B1) : t_Result (((t_B2*t_Message))) ((t_ProtocolError)) :=
  Result_Ok ((B2,Message_Pong (f_received state))).
