(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)











Record A0_record : Type :=
  {
    A0_f_data : t_u8;
  }.


#[export] Instance settable_A0_record : Settable _ :=
  settable! (Build_A0_record) <A0_f_data>.

Record A1_record : Type :=
  {
  }.

#[export]
Notation "'A1_A1_record'" := Build_A1_record.

Record A2_record : Type :=
  {
    A2_f_received : t_u8;
  }.


#[export] Instance settable_A2_record : Settable _ :=
  settable! (Build_A2_record) <A2_f_received>.

Definition init_a (prologue : t_Vec ((t_u8)) ((t_Global))) : t_Result ((t_A0)) ((t_ProtocolError)) :=
  if
    f_lt (impl_1__len (prologue)) ((1 : t_usize))
  then
    Result_Err (ProtocolError_InvalidPrologue)
  else
    Result_Ok (A0 (f_index (prologue) ((0 : t_usize)))).

Definition write_ping (state : t_A0) : t_Result (((t_A1*t_Message))) ((t_ProtocolError)) :=
  Result_Ok ((A1,Message_Ping (f_data state))).

Definition read_pong (e_state : t_A1) (msg : t_Message) : t_Result ((t_A2)) ((t_ProtocolError)) :=
  match msg with
  | Message_Ping (_) =>
    Result_Err (ProtocolError_InvalidMessage)
  | Message_Pong (received) =>
    Result_Ok (A2 (received))
  end.
