(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations looping (array : both (nseq int8 5)) : both (nseq int8 5) :=
  looping array  :=
    letb array := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := impl__len (unsize array)))) (fun i =>
      ssp (fun array =>
        update_at_usize array i (cast_int (WS2 := _) i) : (both (nseq int8 5)))) array in
    array : both (nseq int8 5).
Fail Next Obligation.

Equations looping_2_ (array : both (nseq int8 5)) : both (nseq int8 5) :=
  looping_2_ array  :=
    letb '(array,result) := prod_b (foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := impl__len (unsize array)))) (fun i =>
        ssp (fun array =>
          update_at_usize array i (cast_int (WS2 := _) i) : (both (nseq int8 5)))) array,ret_both (tt : 'unit)) in
    letb _ := ret_both (tt : 'unit) in
    letb _ := result in
    array : both (nseq int8 5).
Fail Next Obligation.
