(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition double_sum '(_ : unit) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun sum _ =>
    (true : bool)) (sum) (fun sum i =>
    let _ := if
      f_lt (i) ((0 : t_i32))
    then
      let hoist7 := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
TODO: Monad for loop-related control flow

This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `CfIntoMonads`.
"%string : string)) (("(break (Tuple0))"%string : string)) in
      never_to_any (hoist7)
    else
      tt in
    let sum := f_add (sum) (i) in
    sum) in
  let sum := f_mul (sum) ((2 : t_i32)) in
  sum.

Definition double_sum2 '(_ : unit) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum2 := (0 : t_i32) in
  let (sum,sum2) := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun (sum,sum2) _ =>
    (true : bool)) ((sum,sum2)) (fun (sum,sum2) i =>
    let _ := if
      f_lt (i) ((0 : t_i32))
    then
      let hoist8 := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
TODO: Monad for loop-related control flow

This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `CfIntoMonads`.
"%string : string)) (("(break (Tuple0))"%string : string)) in
      never_to_any (hoist8)
    else
      tt in
    let sum := f_add (sum) (i) in
    (sum,f_add (sum2) (i))) in
  f_add (sum) (sum2).

Definition double_sum_return (v : t_Slice t_i32) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum := f_fold (f_into_iter (v)) (sum) (fun sum i =>
    let _ := if
      f_lt (i) ((0 : t_i32))
    then
      let hoist9 := ControlFlow_Break ((0 : t_i32)) in
      ControlFlow_Continue (never_to_any (hoist9))
    else
      ControlFlow_Continue (tt) in
    ControlFlow_Continue (let sum := f_add (sum) (i) in
    sum)) in
  let sum := f_mul (sum) ((2 : t_i32)) in
  sum.

Definition double_sum2_return (v : t_Slice t_i32) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum2 := (0 : t_i32) in
  let (sum,sum2) := f_fold (f_into_iter (v)) ((sum,sum2)) (fun (sum,sum2) i =>
    let _ := if
      f_lt (i) ((0 : t_i32))
    then
      let hoist10 := ControlFlow_Break ((0 : t_i32)) in
      ControlFlow_Continue (never_to_any (hoist10))
    else
      ControlFlow_Continue (tt) in
    ControlFlow_Continue (let sum := f_add (sum) (i) in
    (sum,f_add (sum2) (i)))) in
  f_add (sum) (sum2).

Definition bigger_power_2_ (x : t_i32) : t_i32 :=
  let pow := (1 : t_i32) in
  let pow := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Unhandled loop kind

This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `FunctionalizeLoops`.
"%string : string)) (("{
 (loop {
 |pow| {
 (if core::cmp::f_lt(pow, 1000000) {
 {
 let pow: int = { core::ops::arith::f_mul(pow, 2) };
 {
 let pow: int = {
 (if core::cmp::f_lt(pow, x) {
 {
 let pow: int = { core::ops::ari..."%string : string)) in
  pow.

Record M_record : Type :=
  {
    M_f_m : t_Vec ((t_u8)) ((t_Global));
  }.


#[export] Instance settable_M_record : Settable _ :=
  settable! (Build_M_record) <M_f_m>.

Definition impl_M__decoded_message (self : t_M) : t_Option ((t_Vec ((t_u8)) ((t_Global)))) :=
  run (let _ := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation

This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `FunctionalizeLoops`.
"%string : string)) (("{
 for i in (core::iter::traits::collect::f_into_iter(core::ops::range::Range {
 f_start: 0,
 f_end: alloc::vec::impl_1__len::<
 int,
 alloc::alloc::t_Global,
 >(proj_tests::legacy__loops::control_flo..."%string : string)) in
  let hoist15 := ControlFlow_Break (Option_Some (f_clone (f_m self))) in
  ControlFlow_Continue (never_to_any (hoist15))).

Definition nested '(_ : unit) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun sum _ =>
    (true : bool)) (sum) (fun sum i =>
    let sum := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun sum _ =>
      (true : bool)) (sum) (fun sum j =>
      let _ := if
        f_lt (j) ((0 : t_i32))
      then
        let hoist16 := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
TODO: Monad for loop-related control flow

This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `CfIntoMonads`.
"%string : string)) (("(break (Tuple0))"%string : string)) in
        never_to_any (hoist16)
      else
        tt in
      let sum := f_add (sum) (j) in
      sum) in
    let sum := f_add (sum) (i) in
    sum) in
  let sum := f_mul (sum) ((2 : t_i32)) in
  sum.

Definition nested_return '(_ : unit) : t_i32 :=
  let sum := (0 : t_i32) in
  let sum := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun sum _ =>
    (true : bool)) (sum) (fun sum i =>
    let sum := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun sum _ =>
      (true : bool)) (sum) (fun sum j =>
      let _ := if
        f_lt (j) ((0 : t_i32))
      then
        let hoist17 := ControlFlow_Break ((0 : t_i32)) in
        ControlFlow_Continue (never_to_any (hoist17))
      else
        ControlFlow_Continue (tt) in
      ControlFlow_Continue (let sum := f_add (sum) (j) in
      sum)) in
    let sum := f_add (sum) (i) in
    sum) in
  let sum := f_mul (sum) ((2 : t_i32)) in
  sum.

Definition continue_only (x : t_Slice t_i32) : (t_i32*unit) :=
  let product := (1 : t_i32) in
  (f_fold (f_into_iter (x)) (product) (fun product i =>
    let _ := if
      f_eq (i) ((0 : t_i32))
    then
      never_to_any (failure (("ExplicitRejection { reason: "a node of kind [Continue] have been found in the AST" }


Note: the error was labeled with context `reject_Continue`.
"%string : string)) (("continue;"%string : string)))
    else
      tt in
    f_mul_assign (product) (i)),tt).

Definition continue_and_break (x : t_Slice t_i32) : (t_i32*unit) :=
  let product := (1 : t_i32) in
  (f_fold (f_into_iter (x)) (product) (fun product i =>
    let _ := if
      f_eq (i) ((0 : t_i32))
    then
      never_to_any (failure (("ExplicitRejection { reason: "a node of kind [Continue] have been found in the AST" }


Note: the error was labeled with context `reject_Continue`.
"%string : string)) (("continue;"%string : string)))
    else
      tt in
    let _ := if
      f_lt (i) ((0 : t_i32))
    then
      let hoist18 := failure (("something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
TODO: Monad for loop-related control flow

This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
Note: the error was labeled with context `CfIntoMonads`.
"%string : string)) (("(break (Tuple0))"%string : string)) in
      never_to_any (hoist18)
    else
      tt in
    f_mul_assign (product) (i)),tt).
