(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition range1 '(_ : unit) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := fold_range ((0 : t_usize)) ((15 : t_usize)) (fun acc _ =>
    (true : bool)) (acc) (fun acc i =>
    f_add (acc) (i)) in
  acc.

Definition range2 (n : t_usize) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := fold_range ((0 : t_usize)) (f_add (n) ((10 : t_usize))) (fun acc _ =>
    (true : bool)) (acc) (fun acc i =>
    f_add (f_add (acc) (i)) ((1 : t_usize))) in
  acc.

Definition composed_range (n : t_usize) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (f_chain (Range ((0 : t_usize)) (n)) (Range (f_add (n) ((10 : t_usize))) (f_add (n) ((50 : t_usize)))))) (acc) (fun acc i =>
    f_add (f_add (acc) (i)) ((1 : t_usize))) in
  acc.

Definition rev_range (n : t_usize) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (f_rev (Range ((0 : t_usize)) (n)))) (acc) (fun acc i =>
    f_add (f_add (acc) (i)) ((1 : t_usize))) in
  acc.

Definition chunks `{v_CHUNK_LEN : t_usize} (arr : t_Vec ((t_usize)) ((t_Global))) : t_usize :=
  let acc := (0 : t_usize) in
  let chunks := impl__chunks_exact (f_deref (arr)) (v_CHUNK_LEN) in
  let acc := f_fold (f_into_iter (f_clone (chunks))) (acc) (fun acc chunk =>
    let mean := (0 : t_usize) in
    let mean := f_fold (f_into_iter (chunk)) (mean) (fun mean item =>
      f_add (mean) (item)) in
    let acc := f_add (acc) (f_div (mean) (v_CHUNK_LEN)) in
    acc) in
  let acc := f_fold (f_into_iter (impl_88__remainder (chunks))) (acc) (fun acc item =>
    f_sub (acc) (item)) in
  acc.

Definition iterator (arr : t_Vec ((t_usize)) ((t_Global))) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (impl__iter (f_deref (arr)))) (acc) (fun acc item =>
    f_add (acc) (item)) in
  acc.

Definition nested (arr : t_Vec ((t_usize)) ((t_Global))) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (impl__iter (f_deref (arr)))) (acc) (fun acc item =>
    f_fold (f_into_iter (f_rev (Range ((0 : t_usize)) (item)))) (acc) (fun acc i =>
      let acc := f_add (acc) ((1 : t_usize)) in
      f_fold (f_into_iter (f_zip (impl__iter (f_deref (arr))) (Range ((4 : t_usize)) (i)))) (acc) (fun acc j =>
        f_add (f_add (f_add (f_add (acc) (item)) (i)) (j)) ((sndj))))) in
  acc.

Definition pattern (arr : t_Vec (((t_usize*t_usize))) ((t_Global))) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (arr)) (acc) (fun acc (x,y) =>
    f_add (acc) (f_mul (x) (y))) in
  acc.

Definition enumerate_chunks (arr : t_Vec ((t_usize)) ((t_Global))) : t_usize :=
  let acc := (0 : t_usize) in
  let acc := f_fold (f_into_iter (f_enumerate (impl__chunks (f_deref (arr)) ((4 : t_usize))))) (acc) (fun acc (i,chunk) =>
    fold_enumerated_slice (chunk) (fun acc _ =>
      (true : bool)) (acc) (fun acc (j,x) =>
      f_add (f_add (i) (j)) (x))) in
  acc.

Definition bool_returning (x : t_u8) : bool :=
  f_lt (x) ((10 : t_u8)).

Definition f '(_ : unit) : (t_u8*unit) :=
  let acc := (0 : t_u8) in
  (fold_range ((1 : t_u8)) ((10 : t_u8)) (fun acc _ =>
    (true : bool)) (acc) (fun acc i =>
    let acc := f_add (acc) (i) in
    let _ := bool_returning (i) in
    acc),tt).
