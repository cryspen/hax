(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition range '(_ : unit) : (t_u64*unit) :=
  let count := (0 : t_u64) in
  (fold_range ((0 : t_u8)) ((10 : t_u8)) (fun count i =>
    f_le (i) ((10 : t_u8))) (count) (fun count i =>
    let count := f_add (count) ((1 : t_u64)) in
    count),tt).









Definition range_step_by '(_ : unit) : (t_u64*unit) :=
  let count := (0 : t_u64) in
  (fold_range_step_by ((0 : t_u8)) ((10 : t_u8)) ((2 : t_usize)) (fun count i =>
    f_le (i) ((10 : t_u8))) (count) (fun count i =>
    let count := f_add (count) ((1 : t_u64)) in
    count),tt).









Definition enumerated_slice `{v_T : Type} (slice : t_Slice v_T) : (t_u64*unit) :=
  let count := (0 : t_u64) in
  (fold_enumerated_slice (slice) (fun count i =>
    f_le (i) ((10 : t_usize))) (count) (fun count i =>
    let count := f_add (count) ((2 : t_u64)) in
    count),tt).









Definition enumerated_chunked_slice `{v_T : Type} (slice : t_Slice v_T) : (t_u64*unit) :=
  let count := (0 : t_u64) in
  (fold_enumerated_chunked_slice ((3 : t_usize)) (slice) (fun count i =>
    impl_Prop__from_bool ((true : bool))) (count) (fun count i =>
    let count := f_add (count) ((3 : t_u64)) in
    count),tt).








