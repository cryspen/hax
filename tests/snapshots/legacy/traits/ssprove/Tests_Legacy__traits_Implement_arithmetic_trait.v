(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Wrapped : choice_type :=
  (int32).
Equations 0 (s : both t_Wrapped) : both int32 :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : int32)) : both int32.
Fail Next Obligation.
Equations Build_t_Wrapped {0 : both int32} : both (t_Wrapped) :=
  Build_t_Wrapped  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_Wrapped))) : both (t_Wrapped).
Fail Next Obligation.
Notation "'Build_t_Wrapped' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Wrapped (0 := y)).

#[global] Program Instance t_Wrapped_t_Add : t_Add t_Wrapped t_Wrapped :=
  let f_Output := t_Wrapped : choice_type in
  let f_add := fun  (self : both t_Wrapped) (rhs : both t_Wrapped) => Wrapped ((0 self) .+ (0 rhs)) : both t_Wrapped in
  {| f_Output := (@f_Output);
  f_add := (@f_add)|}.
Fail Next Obligation.
Hint Unfold t_Wrapped_t_Add.

Equations test (x : both t_Wrapped) (y : both t_Wrapped) : both t_Wrapped :=
  test x y  :=
    x .+ y : both t_Wrapped.
Fail Next Obligation.
