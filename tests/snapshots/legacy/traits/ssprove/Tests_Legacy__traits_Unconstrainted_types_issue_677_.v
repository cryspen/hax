(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Class t_PolyOp (Self : choice_type) (v_Self : v_Self) := {
  f_op : (both int32 -> both int32 -> both int32) ;
}.

Definition t_Plus : choice_type :=
  'unit.
Equations Build_t_Plus : both (t_Plus) :=
  Build_t_Plus  :=
    ret_both (tt (* Empty tuple *) : (t_Plus)) : both (t_Plus).
Fail Next Obligation.

#[global] Program Instance t_Plus_t_PolyOp : t_PolyOp t_Plus :=
  let f_op := fun  (x : both int32) (y : both int32) => x .+ y : both int32 in
  {| f_op := (@f_op)|}.
Fail Next Obligation.
Hint Unfold t_Plus_t_PolyOp.

Definition t_Times : choice_type :=
  'unit.
Equations Build_t_Times : both (t_Times) :=
  Build_t_Times  :=
    ret_both (tt (* Empty tuple *) : (t_Times)) : both (t_Times).
Fail Next Obligation.

#[global] Program Instance t_Times_t_PolyOp : t_PolyOp t_Times :=
  let f_op := fun  (x : both int32) (y : both int32) => x .* y : both int32 in
  {| f_op := (@f_op)|}.
Fail Next Obligation.
Hint Unfold t_Times_t_PolyOp.

Equations twice {v_OP : v_OP} `{ t_PolyOp v_OP} (x : both int32) : both int32 :=
  twice x  :=
    f_op x x : both int32.
Fail Next Obligation.

Equations both (x : both int32) : both (int32 × int32) :=
  both x  :=
    prod_b (twice x,twice x) : both (int32 × int32).
Fail Next Obligation.
