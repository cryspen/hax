(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations original_function_from_495_ (list : both (t_Vec int8 t_Global)) : both 'unit :=
  original_function_from_495_ list  :=
    letb (e_indices : t_Vec int8 t_Global) := f_collect (f_filter (Build_t_Range (f_start := ret_both (0 : int8)) (f_end := ret_both (5 : int8))) (fun i =>
      letb '(_,out) := f_any (impl__iter (f_deref list)) (fun n =>
        n =.? i) in
      out)) in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations minimized_1_ (list : both (t_Vec int8 t_Global)) : both (t_Vec int8 t_Global) :=
  minimized_1_ list  :=
    f_collect (f_filter (Build_t_Range (f_start := ret_both (0 : int8)) (f_end := ret_both (5 : int8))) (fun _ =>
      ret_both (true : 'bool))) : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations minimized_2_ (it : both (t_Filter (t_Range int8) (int8 -> 'bool))) : both 'unit :=
  minimized_2_ it  :=
    letb (e_indices : t_Vec int8 t_Global) := f_collect it in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
