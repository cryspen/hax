(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Bar {v_FooConst : both uint_size} {v_FooType : v_FooType} : choice_type :=
  (nseq v_FooType (is_pure (v_FooConst))).
Equations 0 {v_FooConst : both uint_size} {v_FooType : v_FooType} (s : both t_Bar) : both (nseq v_FooType (is_pure (v_FooConst))) :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : (nseq v_FooType (is_pure (v_FooConst))))) : both (nseq v_FooType (is_pure (v_FooConst))).
Fail Next Obligation.
Equations Build_t_Bar {v_FooConst : both uint_size} {v_FooType : v_FooType} {0 : both (nseq v_FooType (is_pure (v_FooConst)))} : both (t_Bar) :=
  Build_t_Bar  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_Bar))) : both (t_Bar).
Fail Next Obligation.
Notation "'Build_t_Bar' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Bar (0 := y)).

Class t_Foo (Self : choice_type) (v_Self : v_Self) {v_FooConst : both uint_size} {v_FooType : v_FooType} := {
  f_fun : (both (nseq v_FooType (is_pure (v_FooConst))) -> both (nseq v_FunType (is_pure (v_FunConst))) -> both 'unit) ;
}.

#[global] Program Instance v_SelfType_t_Foo {v_FooConst : both uint_size} {v_FooType : v_FooType} {v_SelfType : v_SelfType} : t_Foo v_SelfType (both uint_size) v_FooType :=
  let f_fun := fun  (x : both (nseq v_FooType (is_pure (v_FooConst)))) (y : both (nseq v_FunType (is_pure (v_FunConst)))) => ret_both (tt : 'unit) : both 'unit in
  {| f_fun := (@f_fun)|}.
Fail Next Obligation.
Hint Unfold v_SelfType_t_Foo.
