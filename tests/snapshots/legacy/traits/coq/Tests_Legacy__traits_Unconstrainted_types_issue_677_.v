(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Class t_PolyOp (v_Self : Type) : Type :=
  {
    f_op : t_u32 -> t_u32 -> t_u32;
  }.
Arguments t_PolyOp (_).

Record Plus_record : Type :=
  {
  }.

#[export]
Notation "'Plus_Plus_record'" := Build_Plus_record.

Instance t_PolyOp_983608216 : t_PolyOp ((t_Plus)) :=
  {
    implaabbcc_t_PolyOp_f_op := fun  (x : t_u32) (y : t_u32)=>
      f_add (x) (y);
  }.

Record Times_record : Type :=
  {
  }.

#[export]
Notation "'Times_Times_record'" := Build_Times_record.

Instance t_PolyOp_942693376 : t_PolyOp ((t_Times)) :=
  {
    implaabbcc_t_PolyOp_f_op := fun  (x : t_u32) (y : t_u32)=>
      f_mul (x) (y);
  }.

Definition twice `{v_OP : Type} `{t_PolyOp (v_OP)} (x : t_u32) : t_u32 :=
  f_op (x) (x).

Definition both (x : t_u32) : (t_u32*t_u32) :=
  (twice (x),twice (x)).
