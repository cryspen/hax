(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record Type_record (v_TypeArg : Type) (v_ConstArg : t_usize) : Type :=
  {
    Type_f_field : t_Array (v_TypeArg) (v_ConstArg);
  }.
Arguments Build_Type_record {_} {_}.
Arguments Type_f_field {_} {_}.
#[export] Instance settable_Type_record `{v_TypeArg : Type} `{v_ConstArg : t_usize} : Settable _ :=
  settable! (Build_Type_record (v_TypeArg := v_TypeArg) (v_ConstArg := v_ConstArg)) <Type_f_field>.

Class t_Trait (v_Self : Type) (v_TypeArg : Type) (v_ConstArg : t_usize) : Type :=
  {
    f_method v_MethodTypeArg : Type v_MethodConstArg : t_usize : v_Self -> v_TypeArg -> t_Type ((v_TypeArg)) (v_ConstArg) -> unit;
    f_associated_function v_MethodTypeArg : Type v_MethodConstArg : t_usize : v_Self -> v_TypeArg -> t_Type ((v_TypeArg)) (v_ConstArg) -> unit;
  }.
Arguments t_Trait (_) (_) (_).

Instance t_Trait_652750966 `{v_TypeArg : Type} `{v_ConstArg : t_usize} : t_Trait ((unit)) ((v_TypeArg)) (v_ConstArg) :=
  {
    implaabbcc_t_Trait_f_method := fun  (self : unit) (value_TypeArg : v_TypeArg) (value_Type : t_Type ((v_TypeArg)) (v_ConstArg))=>
      tt;
    implaabbcc_t_Trait_f_associated_function := fun  (e_self : unit) (value_TypeArg : v_TypeArg) (value_Type : t_Type ((v_TypeArg)) (v_ConstArg))=>
      tt;
  }.

Definition method_caller `{v_MethodTypeArg : Type} `{v_TypeArg : Type} `{v_ConstArg : t_usize} `{v_MethodConstArg : t_usize} `{v_ImplTrait : Type} `{t_Trait (v_ImplTrait) (v_TypeArg) v_ConstArg} (x : v_ImplTrait) (value_TypeArg : v_TypeArg) (value_Type : t_Type ((v_TypeArg)) (v_ConstArg)) : unit :=
  let _ := f_method (x) (value_TypeArg) (value_Type) in
  tt.

Definition associated_function_caller `{v_MethodTypeArg : Type} `{v_TypeArg : Type} `{v_ConstArg : t_usize} `{v_MethodConstArg : t_usize} `{v_ImplTrait : Type} `{t_Trait (v_ImplTrait) (v_TypeArg) v_ConstArg} (x : v_ImplTrait) (value_TypeArg : v_TypeArg) (value_Type : t_Type ((v_TypeArg)) (v_ConstArg)) : unit :=
  let _ := f_associated_function (x) (value_TypeArg) (value_Type) in
  tt.

Class t_SubTrait (v_Self : Type) (v_TypeArg : Type) (v_ConstArg : t_usize) `{t_Trait (v_Self) (v_TypeArg) v_ConstArg} : Type :=
  {
    f_AssocType `{t_Trait (f_AssocType) (v_TypeArg) v_ConstArg} : Type;
  }.
Arguments t_SubTrait (_) (_) (_) {_}.
