(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Class t_SuperTrait (v_Self : Type) `{t_Clone (v_Self)} : Type :=
  {
    f_function_of_super_trait : v_Self -> t_u32;
  }.
Arguments t_SuperTrait (_) {_}.

Instance t_SuperTrait_269254762 : t_SuperTrait ((t_i32)) :=
  {
    implaabbcc_t_SuperTrait_f_function_of_super_trait := fun  (self : t_i32)=>
      cast (impl_i32__abs (self));
  }.

Record Struct_record : Type :=
  {
  }.

#[export]
Notation "'Struct_Struct_record'" := Build_Struct_record.

Class t_Bar (v_Self : Type) : Type :=
  {
    f_bar : v_Self -> unit;
  }.
Arguments t_Bar (_).

Definition impl_2__method `{v_T : Type} `{t_Bar (v_T)} (x : v_T) : unit :=
  f_bar (x).

Definition cclosure_iimpl_expr `{v_I : Type} `{t_Iterator (v_I)} `{_.(f_Item) = unit} (it : v_I) : t_Vec ((unit)) ((t_Global)) :=
  f_collect (f_map (it) (fun x =>
    x)).

Definition cclosure_iimpl_expr_fngen `{v_I : Type} `{v_F : Type} `{t_Iterator (v_I)} `{_.(f_Item) = unit} `{t_FnMut (v_F) ((unit))} `{_.(f_Output) = unit} (it : v_I) (f : v_F) : t_Vec ((unit)) ((t_Global)) :=
  f_collect (f_map (it) (f)).

Inductive t_Error : Type :=
| Error_Fail.


Definition t_Error_cast_to_repr (x : t_Error) : t_isize :=
  match x with
  | Error_Fail =>
    (0 : t_isize)
  end.

Definition impl_Error__for_application_callback '(_ : unit) : unit -> t_Error :=
  fun _ =>
    Error_Fail.

Definition iter_option `{v_T : Type} (x : t_Option ((v_T))) : t_IntoIter ((v_T)) :=
  f_into_iter (impl__as_ref (x)).

Definition uuse_iimpl_trait '(_ : unit) : unit :=
  let iter := iter_option (Option_Some ((false : bool))) in
  let (tmp0,out) := f_next (iter) in
  let iter := tmp0 in
  let _ := out in
  tt.

Class t_Foo (v_Self : Type) : Type :=
  {
    f_AssocType : Type;
    _ :: `{t_SuperTrait (f_AssocType)};
    f_N : t_usize;
    f_assoc_f : unit -> unit;
    f_method_f : v_Self -> unit;
    f_assoc_type : f_AssocType -> unit;
    _ :: `{t_Copy (f_AssocType)};
  }.
Arguments t_Foo (_).

Class t_Lang (v_Self : Type) : Type :=
  {
    f_Var : Type;
    f_s : v_Self -> t_i32 -> (v_Self*f_Var);
  }.
Arguments t_Lang (_).

Definition f `{v_T : Type} `{t_Foo (v_T)} (x : v_T) : unit :=
  let _ := f_assoc_f (tt) in
  f_method_f (x).

Definition g `{v_T : Type} `{t_Foo (v_T)} (x : f_AssocType) : t_u32 :=
  f_function_of_super_trait (x).

Instance t_Foo_365336035 : t_Foo ((unit)) :=
  {
    implaabbcc_t_Foo_f_AssocType := t_i32;
    implaabbcc_t_Foo_f_N := (32 : t_usize);
    implaabbcc_t_Foo_f_assoc_f := fun  (_ : unit)=>
      tt;
    implaabbcc_t_Foo_f_method_f := fun  (self : unit)=>
      f_assoc_f (tt);
    implaabbcc_t_Foo_f_assoc_type := fun  (_ : t_i32)=>
      tt;
  }.
