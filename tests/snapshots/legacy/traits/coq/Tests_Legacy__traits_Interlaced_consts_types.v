(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record Bar_record (v_FooConst : t_usize) (v_FooType : Type) : Type :=
  {
    Bar_0 : t_Array (v_FooType) (v_FooConst);
  }.
Arguments Build_Bar_record {_} {_}.
Arguments Bar_0 {_} {_}.
#[export] Instance settable_Bar_record `{v_FooConst : t_usize} `{v_FooType : Type} : Settable _ :=
  settable! (Build_Bar_record (v_FooConst := v_FooConst) (v_FooType := v_FooType)) <Bar_0>.
Notation "'Bar_Bar_record'" := Build_Bar_record.

Class t_Foo (v_Self : Type) (v_FooConst : t_usize) (v_FooType : Type) : Type :=
  {
    f_fun v_FunConst : t_usize v_FunType : Type : t_Array (v_FooType) (v_FooConst) -> t_Array (v_FunType) (v_FunConst) -> unit;
  }.
Arguments t_Foo (_) (_) (_).

Instance t_Foo_599021221 `{v_FooConst : t_usize} `{v_FooType : Type} `{v_SelfType : Type} : t_Foo ((v_SelfType)) (v_FooConst) ((v_FooType)) :=
  {
    implaabbcc_t_Foo_f_fun := fun  (x : t_Array (v_FooType) (v_FooConst)) (y : t_Array (v_FunType) (v_FunConst))=>
      tt;
  }.
