(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Definition t_T1 : choice_type :=
  ('unit).
Notation "'T1_T1_case'" := tt (at level 100).
Equations T1_T1 : both t_T1 :=
  T1_T1  :=
    ret_both (tt : 'unit : t_T1) : both t_T1.
Fail Next Obligation.

Definition t_T : choice_type :=
  (t_T1).
Notation "'T_T_case' x" := x (at level 100).
Equations T_T (x : both t_T1) : both t_T :=
  T_T x  :=
    bind_both x (fun x =>
      ret_both (x : t_T)) : both t_T.
Fail Next Obligation.

Equations t_T1_cast_to_repr (x : both t_T1) : both uint_size :=
  t_T1_cast_to_repr x  :=
    matchb x with
    | T1_T1_case  =>
      ret_both (0 : uint_size)
    end : both uint_size.
Fail Next Obligation.

Definition t_T2 : choice_type :=
  (t_T).
Notation "'T2_T2_case' x" := x (at level 100).
Equations T2_T2 (x : both t_T) : both t_T2 :=
  T2_T2 x  :=
    bind_both x (fun x =>
      ret_both (x : t_T2)) : both t_T2.
Fail Next Obligation.

Definition t_T2Rec : choice_type :=
  (t_TRec).
Notation "'T2Rec_T2_case' x" := x (at level 100).
Equations T2Rec_T2 (x : both t_TRec) : both t_T2Rec :=
  T2Rec_T2 x  :=
    bind_both x (fun x =>
      ret_both (x : t_T2Rec)) : both t_T2Rec.
Fail Next Obligation.

Definition t_T1Rec : choice_type :=
  (t_Box t_T2Rec t_Global).
Notation "'T1Rec_T1_case' x" := x (at level 100).
Equations T1Rec_T1 (x : both (t_Box t_T2Rec t_Global)) : both t_T1Rec :=
  T1Rec_T1 x  :=
    bind_both x (fun x =>
      ret_both (x : t_T1Rec)) : both t_T1Rec.
Fail Next Obligation.

Definition t_TRec : choice_type :=
  (t_T1Rec ∐ 'unit).
Notation "'TRec_T_case' x" := (inl x) (at level 100).
Equations TRec_T (x : both t_T1Rec) : both t_TRec :=
  TRec_T x  :=
    bind_both x (fun x =>
      ret_both (inl x : t_TRec)) : both t_TRec.
Fail Next Obligation.
Notation "'TRec_Empty_case'" := (inr tt) (at level 100).
Equations TRec_Empty : both t_TRec :=
  TRec_Empty  :=
    ret_both (inr (tt : 'unit) : t_TRec) : both t_TRec.
Fail Next Obligation.
