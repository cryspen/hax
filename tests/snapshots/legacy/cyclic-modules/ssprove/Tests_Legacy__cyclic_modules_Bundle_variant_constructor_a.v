(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Definition t_Context : choice_type :=
  (int32 ∐ int32).
Notation "'Context_A_case' x" := (inl x) (at level 100).
Equations Context_A (x : both int32) : both t_Context :=
  Context_A x  :=
    bind_both x (fun x =>
      ret_both (inl x : t_Context)) : both t_Context.
Fail Next Obligation.
Notation "'Context_B_case' x" := (inr x) (at level 100).
Equations Context_B (x : both int32) : both t_Context :=
  Context_B x  :=
    bind_both x (fun x =>
      ret_both (inr x : t_Context)) : both t_Context.
Fail Next Obligation.

Equations impl__test (x : both (t_Option int32)) : both (t_Option t_Context) :=
  impl__test x  :=
    impl__map x Context_A : both (t_Option t_Context).
Fail Next Obligation.

Equations h (_ : both 'unit) : both t_Context :=
  h _  :=
    Context_A (ret_both (1 : int32)) : both t_Context.
Fail Next Obligation.

Equations f (_ : both 'unit) : both t_Context :=
  f _  :=
    h : both t_Context.
Fail Next Obligation.
