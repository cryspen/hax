(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Inductive t_Error : Type :=
| Error_Foo
| Error_Bar : t_u32 -> _.



Definition loop3 '(_ : unit) : t_Result ((t_u32)) ((t_Error)) :=
  let x := (0 : t_u32) in
  let x := fold_range ((1 : t_i32)) ((10 : t_i32)) (fun x _ =>
    (true : bool)) (x) (fun x i =>
    let _ := if
      f_eq (i) ((5 : t_i32))
    then
      let hoist2 := ControlFlow_Break (Result_Err (Error_Foo)) in
      ControlFlow_Continue (never_to_any (hoist2))
    else
      ControlFlow_Continue (tt) in
    ControlFlow_Continue (f_add (x) ((5 : t_u32)))) in
  Result_Ok (x).

Definition loop4 '(_ : unit) : t_Result (((t_u32*t_u32))) ((t_Error)) :=
  let e := (0 : t_u32) in
  let f := fun () =>
    (42 : t_u32) in
  let e := fold_range ((0 : t_u32)) (f_call (f) ((tt))) (fun e _ =>
    (true : bool)) (e) (fun e i =>
    let _ := if
      f_gt (i) ((10 : t_u32))
    then
      let hoist3 := ControlFlow_Break (Result_Err (Error_Bar (e))) in
      ControlFlow_Continue (never_to_any (hoist3))
    else
      ControlFlow_Continue (tt) in
    ControlFlow_Continue (f_add (e) (i))) in
  Result_Ok ((e,e)).
