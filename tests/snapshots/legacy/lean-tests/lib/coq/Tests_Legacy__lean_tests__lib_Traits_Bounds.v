(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Class t_T1 (v_Self : Type) : Type :=
  {
    f_f1 : v_Self -> t_usize;
  }.
Arguments t_T1 (_).

Class t_T2 (v_Self : Type) : Type :=
  {
    f_f2 : v_Self -> t_usize;
  }.
Arguments t_T2 (_).

Class t_Test (v_Self : Type) (v_T : Type) `{t_T2 (v_Self)} `{t_T1 (v_T)} : Type :=
  {
    f_ff_test : v_Self -> v_T -> t_usize;
  }.
Arguments t_Test (_) (_) {_} {_}.

Record S1_record : Type :=
  {
  }.

#[export]
Notation "'S1_S1_record'" := Build_S1_record.

Instance t_T1_430553508 : t_T1 ((t_S1)) :=
  {
    implaabbcc_t_T1_f_f1 := fun  (self : t_S1)=>
      (0 : t_usize);
  }.

Record S2_record : Type :=
  {
  }.

#[export]
Notation "'S2_S2_record'" := Build_S2_record.

Instance t_T2_1059470561 : t_T2 ((t_S2)) :=
  {
    implaabbcc_t_T2_f_f2 := fun  (self : t_S2)=>
      (1 : t_usize);
  }.

Instance t_Test_68453437 : t_Test ((t_S2)) ((t_S1)) :=
  {
    implaabbcc_t_Test_f_ff_test := fun  (self : t_S2) (x : t_S1)=>
      f_add (f_add (f_f1 (x)) (f_f2 (self))) ((1 : t_usize));
  }.

Definition test (x1 : t_S1) (x2 : t_S2) : t_usize :=
  f_add (f_ff_test (x2) (x1)) (f_f1 (x1)).
