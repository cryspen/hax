(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_S : choice_type :=
  (int32).
Equations f_f (s : both t_S) : both int32 :=
  f_f s  :=
    bind_both s (fun x =>
      ret_both (x : int32)) : both int32.
Fail Next Obligation.
Equations Build_t_S {f_f : both int32} : both (t_S) :=
  Build_t_S  :=
    bind_both f_f (fun f_f =>
      ret_both ((f_f) : (t_S))) : both (t_S).
Fail Next Obligation.
Notation "'Build_t_S' '[' x ']' '(' 'f_f' ':=' y ')'" := (Build_t_S (f_f := y)).

Equations test_tuples (_ : both 'unit) : both (int32 × int32) :=
  test_tuples _  :=
    letb lit := ret_both (1 : int32) in
    letb constr := Build_t_S (f_f := ret_both (42 : int32)) in
    letb proj := f_f constr in
    letb ite := ifb ret_both (true : 'bool)
    then prod_b (ret_both (1 : int32),ret_both (2 : int32))
    else letb z := (ret_both (1 : int32)) .+ (ret_both (2 : int32)) in
    prod_b (z,z) in
    prod_b (ret_both (1 : int32),ret_both (2 : int32)) : both (int32 × int32).
Fail Next Obligation.
