(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Class t_T1 (Self : choice_type) (v_Self : v_Self) := {
  f_f : (both v_Self -> both uint_size) ;
}.

Class t_T2 (Self : choice_type) (v_Self : v_Self) := {
  f_f : (both v_Self -> both uint_size) ;
}.

Class t_T3 (Self : choice_type) (v_Self : v_Self) := {
  f_f : (both v_Self -> both uint_size) ;
}.

#[global] Program Instance int32_t_T1 : t_T1 int32 :=
  let f_f := fun  (self : both int32) => ret_both (0 : uint_size) : both uint_size in
  {| f_f := (@f_f)|}.
Fail Next Obligation.
Hint Unfold int32_t_T1.

#[global] Program Instance int32_t_T2 : t_T2 int32 :=
  let f_f := fun  (self : both int32) => ret_both (1 : uint_size) : both uint_size in
  {| f_f := (@f_f)|}.
Fail Next Obligation.
Hint Unfold int32_t_T2.

#[global] Program Instance int32_t_T3 : t_T3 int32 :=
  let f_f := fun  (self : both int32) => ret_both (2 : uint_size) : both uint_size in
  {| f_f := (@f_f)|}.
Fail Next Obligation.
Hint Unfold int32_t_T3.

Equations test (_ : both 'unit) : both uint_size :=
  test _  :=
    letb (x : int32) := ret_both (9 : int32) in
    ((f_f x) .+ (f_f x)) .+ (f_f x) : both uint_size.
Fail Next Obligation.
