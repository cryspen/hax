(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations test1 (_ : both 'unit) : both int32 :=
  test1 _  :=
    letb x := ifb ret_both (true : 'bool)
    then ret_both (0 : int32)
    else ret_both (1 : int32) in
    ifb ret_both (false : 'bool)
    then ret_both (2 : int32)
    else ret_both (3 : int32) : both int32.
Fail Next Obligation.

Equations test2 (b : both 'bool) : both int32 :=
  test2 b  :=
    letb x := (ret_both (1 : int32)) .+ (ifb ret_both (true : 'bool)
    then ret_both (0 : int32)
    else ret_both (1 : int32)) in
    letb y := ret_both (0 : int32) in
    letb y := ifb ret_both (true : 'bool)
    then (y .+ x) .+ (ret_both (1 : int32))
    else (y .- x) .- (ret_both (1 : int32)) in
    ifb b
    then letb z := y .+ y in
    (z .+ y) .+ x
    else letb z := y .- x in
    (z .+ y) .+ x : both int32.
Fail Next Obligation.
