(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations v_FORTYTWO : both uint_size :=
  v_FORTYTWO  :=
    ret_both (42 : uint_size) : both uint_size.
Fail Next Obligation.

Equations v_MINUS_FORTYTWO : both uint_size :=
  v_MINUS_FORTYTWO  :=
    ret_both (42 : uint_size) : both uint_size.
Fail Next Obligation.

Equations returns42 (_ : both 'unit) : both uint_size :=
  returns42 _  :=
    v_FORTYTWO : both uint_size.
Fail Next Obligation.

Equations add_two_numbers (x : both uint_size) (y : both uint_size) : both uint_size :=
  add_two_numbers x y  :=
    x .+ y : both uint_size.
Fail Next Obligation.

Equations letBinding (x : both uint_size) (y : both uint_size) : both uint_size :=
  letBinding x y  :=
    letb useless := ret_both (tt : 'unit) in
    letb result1 := x .+ y in
    letb result2 := result1 .+ (ret_both (2 : uint_size)) in
    result2 .+ (ret_both (1 : uint_size)) : both uint_size.
Fail Next Obligation.

Equations closure (_ : both 'unit) : both int32 :=
  closure _  :=
    letb x := ret_both (41 : int32) in
    letb f1 := fun y =>
      y .+ x in
    letb f2 := fun y => fun z =>
      (y .+ x) .+ z in
    letb res1 := f_call f1 (ret_both (1 : int32)) in
    letb res2 := f_call f2 (prod_b (ret_both (2 : int32),ret_both (3 : int32))) in
    res1 .+ res2 : both int32.
Fail Next Obligation.

Equations test_before_verbatime_single_line (x : both int8) : both int8 :=
  test_before_verbatime_single_line x  :=
    ret_both (42 : int8) : both int8.
Fail Next Obligation.

Equations test_before_verbatim_multi_line (x : both int8) : both int8 :=
  test_before_verbatim_multi_line x  :=
    ret_both (32 : int8) : both int8.
Fail Next Obligation.

Equations binop_resugarings (x : both int32) : both int32 :=
  binop_resugarings x  :=
    letb add := x .+ (ret_both (1 : int32)) in
    letb sub := add .- (ret_both (2 : int32)) in
    letb mul := sub .* (ret_both (3 : int32)) in
    letb rem := mul .% (ret_both (4 : int32)) in
    letb div := rem ./ (ret_both (5 : int32)) in
    letb rshift := div shift_right x in
    x : both int32.
Fail Next Obligation.
