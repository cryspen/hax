(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations loop1 (_ : both 'unit) : both int32 :=
  loop1 _  :=
    letb (x : int32) := ret_both (0 : int32) in
    letb x := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (1 : int32)) (f_end := ret_both (10 : int32)))) (fun i =>
      ssp (fun x =>
        x .+ i : (both int32))) x in
    x : both int32.
Fail Next Obligation.

Equations loop2 (_ : both 'unit) : both int32 :=
  loop2 _  :=
    letb (x : int32) := ret_both (0 : int32) in
    letb x := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (1 : int32)) (f_end := ret_both (10 : int32)))) (fun i =>
      ssp (fun x =>
        letm[choice_typeMonad.result_bind_code int32] _ := ifb i =.? (ret_both (5 : int32))
        then letm[choice_typeMonad.result_bind_code int32] hoist1 := ControlFlow_Break x in
        ControlFlow_Continue (never_to_any hoist1)
        else ControlFlow_Continue (ret_both (tt : 'unit)) in
        ControlFlow_Continue (letb x := x .+ i in
        x) : (both (t_ControlFlow int32 int32)))) x in
    x : both int32.
Fail Next Obligation.
