(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition dup `{v_T : Type} `{t_Clone (v_T)} (x : v_T) : (v_T*v_T) :=
  (f_clone (x),f_clone (x)).

Definition foo `{v_LEN : t_usize} (arr : t_Array (t_usize) (v_LEN)) : t_usize :=
  let acc := f_add (v_LEN) ((9 : t_usize)) in
  let acc := fold_range ((0 : t_usize)) (v_LEN) (fun acc _ =>
    (true : bool)) (acc) (fun acc i =>
    f_add (acc) (f_index (arr) (i))) in
  acc.

Definition repeat `{v_LEN : t_usize} `{v_T : Type} `{t_Copy (v_T)} (x : v_T) : t_Array (v_T) (v_LEN) :=
  repeat (x) (v_LEN).

Definition f `{v_N : t_usize} (x : t_usize) : t_usize :=
  f_add (f_add (v_N) (v_N)) (x).

Definition call_f '(_ : unit) : t_usize :=
  f_add (f ((3 : t_usize))) ((3 : t_usize)).

Definition g `{v_N : t_usize} `{v_T : Type} `{t_Into (v_T) (t_Array (t_usize) (v_N))} (arr : v_T) : t_usize :=
  f_add (impl__unwrap_or (f_max (f_into_iter (f_into (arr)))) (v_N)) (v_N).

Definition call_g '(_ : unit) : t_usize :=
  f_add (g ([(42 : t_usize); (3 : t_usize); (49 : t_usize)])) ((3 : t_usize)).

Class t_Foo (v_Self : Type) : Type :=
  {
    f_const_add v_N : t_usize : v_Self -> t_usize;
  }.
Arguments t_Foo (_).

Instance t_Foo_492710141 : t_Foo ((t_usize)) :=
  {
    implaabbcc_t_Foo_f_const_add := fun  (self : t_usize)=>
      f_add (self) (v_N);
  }.

Record Bar_record : Type :=
  {
  }.

#[export]
Notation "'Bar_Bar_record'" := Build_Bar_record.

Definition impl_Bar__inherent_impl_generics `{v_T : Type} `{v_N : t_usize} (x : t_Array (v_T) (v_N)) : unit :=
  tt.
