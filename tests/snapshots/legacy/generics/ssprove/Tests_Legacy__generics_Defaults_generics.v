(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Defaults {v_T : v_T} {v_N : both uint_size} : choice_type :=
  (nseq v_T (is_pure (v_N))).
Equations 0 {v_T : v_T} {v_N : both uint_size} (s : both t_Defaults) : both (nseq v_T (is_pure (v_N))) :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : (nseq v_T (is_pure (v_N))))) : both (nseq v_T (is_pure (v_N))).
Fail Next Obligation.
Equations Build_t_Defaults {v_T : v_T} {v_N : both uint_size} {0 : both (nseq v_T (is_pure (v_N)))} : both (t_Defaults) :=
  Build_t_Defaults  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_Defaults))) : both (t_Defaults).
Fail Next Obligation.
Notation "'Build_t_Defaults' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Defaults (0 := y)).

Equations f (_ : both (t_Defaults 'unit (both uint_size))) : both 'unit :=
  f _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
