(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Other : choice_type :=
  (int32).
Equations 0 (s : both t_Other) : both int32 :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : int32)) : both int32.
Fail Next Obligation.
Equations Build_t_Other {0 : both int32} : both (t_Other) :=
  Build_t_Other  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_Other))) : both (t_Other).
Fail Next Obligation.
Notation "'Build_t_Other' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_Other (0 := y)).

Definition t_Test : choice_type :=
  (t_Other).
Notation "'Test_C1_case' x" := x (at level 100).
Equations Test_C1 (x : both t_Other) : both t_Test :=
  Test_C1 x  :=
    bind_both x (fun x =>
      ret_both (x : t_Test)) : both t_Test.
Fail Next Obligation.

Equations impl__test (self : both t_Test) : both int32 :=
  impl__test self  :=
    matchb self with
    | (Test_C1 c : t_Test) =>
      0 c
    end : both int32.
Fail Next Obligation.
