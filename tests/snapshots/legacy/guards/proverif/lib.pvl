(*****************************************)
(* Preamble *)
(*****************************************)

channel c.

fun construct_fail() : bitstring
reduc construct_fail() = fail.

type Option.
fun Some(bitstring): Option [data].
fun None(): Option [data].
letfun Option_err() = let x = construct_fail() in None().

const empty: bitstring.
letfun bitstring_default() = empty.
letfun bitstring_err() = let x = construct_fail() in bitstring_default().

letfun nat_default() = 0.
fun nat_to_bitstring(nat): bitstring.
letfun nat_err() = let x = construct_fail() in nat_default().

letfun bool_default() = false.


(*****************************************)
(* Types and Constructors *)
(*****************************************)



(*****************************************)
(* Functions *)
(*****************************************)

letfun tests__legacy__guards__if_let_guard(x : Option) =
       rust_primitives__hax__failure(
         "ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }


Note: the error was labeled with context `reject_not_in_ProVerif`.
",
         "(match (x) {
 core::option::Option_None => 0,
 core::option::Option_Some(v) if let core::result::Result_Ok(y) = v => y,
 core::option::Option_Some(core::result::Result_Err(y)) => y,
 _ => 1,
 })"
       ).

letfun tests__legacy__guards__equivalent(x : Option) =
       let None() = x in 0
       else let Some(nat_to_bitstring(y)) = let Some(nat_to_bitstring(v)) = x in let y = v in Some(
         nat_to_bitstring(y)
       )
       else None()
       else None() in y
       else let None() = let Some(nat_to_bitstring(v)) = x in let y = v in Some(
         nat_to_bitstring(y)
       )
       else None()
       else None() in let Some(nat_to_bitstring(core__result__Result_Err(y))) = x in y
       else 1.

letfun tests__legacy__guards__multiple_guards(x : Option) =
       rust_primitives__hax__failure(
         "ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }


Note: the error was labeled with context `reject_not_in_ProVerif`.
",
         "(match (x) {
 core::option::Option_None => 0,
 core::option::Option_Some(
 core::result::Result_Ok(v),
 ) if let core::option::Option_Some(1) = core::option::Option_Some(
 core::ops::arith::f_add(v, 1..."
       ).

letfun tests__legacy__guards__if_guard(x : Option) =
       rust_primitives__hax__failure(
         "ExplicitRejection { reason: "a node of kind [Match_guard] have been found in the AST" }


Note: the error was labeled with context `reject_not_in_ProVerif`.
",
         "(match (x) {
 core::option::Option_Some(v) if let true = core::cmp::f_gt(v, 0) => v,
 _ => 0,
 })"
       ).

