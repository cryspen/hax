(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Impossible : choice_type :=
  ‚ä•.

Equations t_Impossible_cast_to_repr (x : both t_Impossible) : both t_Never :=
  t_Impossible_cast_to_repr x  :=
    matchb x with
    end : both t_Never.
Fail Next Obligation.

Equations impossible (_ : both 'unit) : both t_Impossible :=
  impossible _  :=
    failure (ret_both (ExplicitRejection { reason: "a node of kind [Unsafe] have been found in the AST" }


Note: the error was labeled with context `reject_Unsafe`.
 : chString)) (ret_both (unsafe {
 rust_primitives::hax::never_to_any(core::hint::unreachable_unchecked(Tuple0))
 } : chString)) : both t_Impossible.
Fail Next Obligation.

Equations get_unchecked_example (slice : both (seq int8)) : both int8 :=
  get_unchecked_example slice  :=
    failure (ret_both (ExplicitRejection { reason: "a node of kind [Unsafe] have been found in the AST" }


Note: the error was labeled with context `reject_Unsafe`.
 : chString)) (ret_both (unsafe { deref(core::slice::impl__get_unchecked::<int, int>(&(deref(slice)), 6)) } : chString)) : both int8.
Fail Next Obligation.
