(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Inductive t_Impossible : Type :=
.

Definition t_Impossible_cast_to_repr (x : t_Impossible) : t_Never :=
  match x with
  end.

Definition impossible '(_ : unit) `{(false : bool) = true} : t_Impossible :=
  failure (("ExplicitRejection { reason: "a node of kind [Unsafe] have been found in the AST" }


Note: the error was labeled with context `reject_Unsafe`.
"%string : string)) (("unsafe {
 rust_primitives::hax::never_to_any(core::hint::unreachable_unchecked(Tuple0))
 }"%string : string)).

Definition get_unchecked_example (slice : t_Slice t_u8) `{f_gt (impl__len (slice)) ((10 : t_usize)) = true} : t_u8 :=
  failure (("ExplicitRejection { reason: "a node of kind [Unsafe] have been found in the AST" }


Note: the error was labeled with context `reject_Unsafe`.
"%string : string)) (("unsafe { deref(core::slice::impl__get_unchecked::<int, int>(&(deref(slice)), 6)) }"%string : string)).
