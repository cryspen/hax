(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)







Inductive t_Error : Type :=
| Error_CryptoError.


Definition t_Error_cast_to_repr (x : t_Error) : t_isize :=
  match x with
  | Error_CryptoError =>
    (0 : t_isize)
  end.

Record KeyPair_record : Type :=
  {
    KeyPair_f_private_key : t_DHScalar;
    KeyPair_f_public_key : t_Vec ((t_u8)) ((t_Global));
  }.



#[export] Instance settable_KeyPair_record : Settable _ :=
  settable! (Build_KeyPair_record) <KeyPair_f_private_key; KeyPair_f_public_key>.

Definition v_DHLEN : t_usize :=
  (32 : t_usize).

Definition generate_keypair (sk : t_Slice t_u8) : t_KeyPair :=
  let sk := impl_DHScalar__from_bytes (sk) in
  let pk := dh_scalar_multiply_base (DHGroup_X25519) (f_clone (sk)) in
  KeyPair (sk) (pk).

Definition dh (sk : t_KeyPair) (pk : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  let pk := impl_DHElement__from_bytes (pk) in
  dh_scalar_multiply (DHGroup_X25519) (f_clone (f_private_key sk)) (pk).

Definition encrypt (key : t_Slice t_u8) (counter : t_u64) (aad : t_Slice t_u8) (plain : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  let chacha_iv := from_elem ((0 : t_u8)) ((4 : t_usize)) in
  let chacha_iv := impl_2__extend_from_slice (chacha_iv) (unsize (impl_u64__to_le_bytes (counter))) in
  let (cipher,tag) := aead_encrypt (impl_AEADKey__from_bytes (AEADAlgorithm_Chacha20Poly1305) (key)) (impl_AEADIV__from_bytes (f_deref (chacha_iv))) (aad) (plain) in
  let cipher := impl_2__extend_from_slice (cipher) (f_deref (tag)) in
  cipher.

Definition decrypt (key : t_Slice t_u8) (counter : t_u64) (aad : t_Slice t_u8) (cipher : t_Slice t_u8) : t_Result ((t_Vec ((t_u8)) ((t_Global)))) ((t_Error)) :=
  let chacha_iv := from_elem ((0 : t_u8)) ((4 : t_usize)) in
  let chacha_iv := impl_2__extend_from_slice (chacha_iv) (unsize (impl_u64__to_le_bytes (counter))) in
  let cipher_len := f_sub (impl__len (cipher)) ((16 : t_usize)) in
  let cip := f_index (cipher) (Range ((0 : t_usize)) (cipher_len)) in
  let tag := f_index (cipher) (Range (cipher_len) (impl__len (cipher))) in
  impl__map_err (aead_decrypt (impl_AEADKey__from_bytes (AEADAlgorithm_Chacha20Poly1305) (key)) (impl_AEADIV__from_bytes (f_deref (chacha_iv))) (aad) (cip) (impl_AEADTag__from_bytes (tag))) (fun _ =>
    Error_CryptoError).

Definition rekey (key : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  encrypt (key) ((18446744073709551615 : t_u64)) (f_deref (impl__new (tt))) (unsize (repeat ((0 : t_u8)) ((32 : t_usize)))).

Definition v_HASHLEN : t_usize :=
  (32 : t_usize).

Definition v_BLOCKLEN : t_usize :=
  (64 : t_usize).

Definition hash (input : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  hash (HashAlgorithm_Sha256) (input).

Definition hmac_hash (key : t_Slice t_u8) (input : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  hmac (HMACAlgorithm_Sha256) (key) (input).

Definition kdf_next (secret : t_Slice t_u8) (prev : t_Slice t_u8) (counter : t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  hmac_hash (secret) (f_deref (impl__concat (unsize ([prev; unsize ([counter])])))).

Definition hkdf1 (key : t_Slice t_u8) (ikm : t_Slice t_u8) : t_Vec ((t_u8)) ((t_Global)) :=
  let secret := hmac_hash (key) (ikm) in
  kdf_next (f_deref (secret)) (f_deref (impl__new (tt))) ((1 : t_u8)).

Definition hkdf2 (key : t_Slice t_u8) (ikm : t_Slice t_u8) : (t_Vec ((t_u8)) ((t_Global))*t_Vec ((t_u8)) ((t_Global))) :=
  let secret := hmac_hash (key) (ikm) in
  let k1 := kdf_next (f_deref (secret)) (f_deref (impl__new (tt))) ((1 : t_u8)) in
  let k2 := kdf_next (f_deref (secret)) (f_deref (k1)) ((2 : t_u8)) in
  (k1,k2).

Definition hkdf3 (key : t_Slice t_u8) (ikm : t_Slice t_u8) : (t_Vec ((t_u8)) ((t_Global))*t_Vec ((t_u8)) ((t_Global))*t_Vec ((t_u8)) ((t_Global))) :=
  let secret := hmac_hash (key) (ikm) in
  let k1 := kdf_next (f_deref (secret)) (f_deref (impl__new (tt))) ((1 : t_u8)) in
  let k2 := kdf_next (f_deref (secret)) (f_deref (k1)) ((2 : t_u8)) in
  let k3 := kdf_next (f_deref (secret)) (f_deref (k1)) ((3 : t_u8)) in
  (k1,k2,k3).
