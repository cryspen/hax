(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Error : choice_type :=
  ('unit).
Notation "'Error_CryptoError_case'" := tt (at level 100).
Equations Error_CryptoError : both t_Error :=
  Error_CryptoError  :=
    ret_both (tt : 'unit : t_Error) : both t_Error.
Fail Next Obligation.

Equations t_Error_cast_to_repr (x : both t_Error) : both uint_size :=
  t_Error_cast_to_repr x  :=
    matchb x with
    | Error_CryptoError_case  =>
      ret_both (0 : uint_size)
    end : both uint_size.
Fail Next Obligation.

Definition t_KeyPair : choice_type :=
  (t_DHScalar × t_Vec int8 t_Global).
Equations f_private_key (s : both t_KeyPair) : both t_DHScalar :=
  f_private_key s  :=
    bind_both s (fun x =>
      ret_both (fst x : t_DHScalar)) : both t_DHScalar.
Fail Next Obligation.
Equations f_public_key (s : both t_KeyPair) : both (t_Vec int8 t_Global) :=
  f_public_key s  :=
    bind_both s (fun x =>
      ret_both (snd x : (t_Vec int8 t_Global))) : both (t_Vec int8 t_Global).
Fail Next Obligation.
Equations Build_t_KeyPair {f_private_key : both t_DHScalar} {f_public_key : both (t_Vec int8 t_Global)} : both (t_KeyPair) :=
  Build_t_KeyPair  :=
    bind_both f_public_key (fun f_public_key =>
      bind_both f_private_key (fun f_private_key =>
        ret_both ((f_private_key,f_public_key) : (t_KeyPair)))) : both (t_KeyPair).
Fail Next Obligation.
Notation "'Build_t_KeyPair' '[' x ']' '(' 'f_private_key' ':=' y ')'" := (Build_t_KeyPair (f_private_key := y) (f_public_key := f_public_key x)).
Notation "'Build_t_KeyPair' '[' x ']' '(' 'f_public_key' ':=' y ')'" := (Build_t_KeyPair (f_private_key := f_private_key x) (f_public_key := y)).

Equations v_DHLEN : both uint_size :=
  v_DHLEN  :=
    ret_both (32 : uint_size) : both uint_size.
Fail Next Obligation.

Equations generate_keypair (sk : both (seq int8)) : both t_KeyPair :=
  generate_keypair sk  :=
    letb sk := impl_DHScalar__from_bytes sk in
    letb pk := dh_scalar_multiply_base DHGroup_X25519 (f_clone sk) in
    Build_t_KeyPair (f_private_key := sk) (f_public_key := pk) : both t_KeyPair.
Fail Next Obligation.

Equations dh (sk : both t_KeyPair) (pk : both (seq int8)) : both (t_Vec int8 t_Global) :=
  dh sk pk  :=
    letb pk := impl_DHElement__from_bytes pk in
    dh_scalar_multiply DHGroup_X25519 (f_clone (f_private_key sk)) pk : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations encrypt (key : both (seq int8)) (counter : both int64) (aad : both (seq int8)) (plain : both (seq int8)) : both (t_Vec int8 t_Global) :=
  encrypt key counter aad plain  :=
    letb chacha_iv := from_elem (ret_both (0 : int8)) (ret_both (4 : uint_size)) in
    letb chacha_iv := impl_2__extend_from_slice chacha_iv (unsize (impl_u64__to_le_bytes counter)) in
    letb '(cipher,tag) := aead_encrypt (impl_AEADKey__from_bytes AEADAlgorithm_Chacha20Poly1305 key) (impl_AEADIV__from_bytes (f_deref chacha_iv)) aad plain in
    letb cipher := impl_2__extend_from_slice cipher (f_deref tag) in
    cipher : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations decrypt (key : both (seq int8)) (counter : both int64) (aad : both (seq int8)) (cipher : both (seq int8)) : both (t_Result (t_Vec int8 t_Global) t_Error) :=
  decrypt key counter aad cipher  :=
    letb chacha_iv := from_elem (ret_both (0 : int8)) (ret_both (4 : uint_size)) in
    letb chacha_iv := impl_2__extend_from_slice chacha_iv (unsize (impl_u64__to_le_bytes counter)) in
    letb cipher_len := (impl__len cipher) .- (ret_both (16 : uint_size)) in
    letb cip := cipher.a[(Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := cipher_len))] in
    letb tag := cipher.a[(Build_t_Range (f_start := cipher_len) (f_end := impl__len cipher))] in
    impl__map_err (aead_decrypt (impl_AEADKey__from_bytes AEADAlgorithm_Chacha20Poly1305 key) (impl_AEADIV__from_bytes (f_deref chacha_iv)) aad cip (impl_AEADTag__from_bytes tag)) (fun _ =>
      Error_CryptoError) : both (t_Result (t_Vec int8 t_Global) t_Error).
Fail Next Obligation.

Equations rekey (key : both (seq int8)) : both (t_Vec int8 t_Global) :=
  rekey key  :=
    encrypt key (ret_both (18446744073709551615 : int64)) (f_deref impl__new) (unsize (repeat (ret_both (0 : int8)) (ret_both (32 : uint_size)))) : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations v_HASHLEN : both uint_size :=
  v_HASHLEN  :=
    ret_both (32 : uint_size) : both uint_size.
Fail Next Obligation.

Equations v_BLOCKLEN : both uint_size :=
  v_BLOCKLEN  :=
    ret_both (64 : uint_size) : both uint_size.
Fail Next Obligation.

Equations hash (input : both (seq int8)) : both (t_Vec int8 t_Global) :=
  hash input  :=
    hash HashAlgorithm_Sha256 input : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations hmac_hash (key : both (seq int8)) (input : both (seq int8)) : both (t_Vec int8 t_Global) :=
  hmac_hash key input  :=
    hmac HMACAlgorithm_Sha256 key input : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations kdf_next (secret : both (seq int8)) (prev : both (seq int8)) (counter : both int8) : both (t_Vec int8 t_Global) :=
  kdf_next secret prev counter  :=
    hmac_hash secret (f_deref (impl__concat (unsize (array_from_list [prev;
      unsize (array_from_list [counter])])))) : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations hkdf1 (key : both (seq int8)) (ikm : both (seq int8)) : both (t_Vec int8 t_Global) :=
  hkdf1 key ikm  :=
    letb secret := hmac_hash key ikm in
    kdf_next (f_deref secret) (f_deref impl__new) (ret_both (1 : int8)) : both (t_Vec int8 t_Global).
Fail Next Obligation.

Equations hkdf2 (key : both (seq int8)) (ikm : both (seq int8)) : both (t_Vec int8 t_Global × t_Vec int8 t_Global) :=
  hkdf2 key ikm  :=
    letb secret := hmac_hash key ikm in
    letb k1 := kdf_next (f_deref secret) (f_deref impl__new) (ret_both (1 : int8)) in
    letb k2 := kdf_next (f_deref secret) (f_deref k1) (ret_both (2 : int8)) in
    prod_b (k1,k2) : both (t_Vec int8 t_Global × t_Vec int8 t_Global).
Fail Next Obligation.

Equations hkdf3 (key : both (seq int8)) (ikm : both (seq int8)) : both (t_Vec int8 t_Global × t_Vec int8 t_Global × t_Vec int8 t_Global) :=
  hkdf3 key ikm  :=
    letb secret := hmac_hash key ikm in
    letb k1 := kdf_next (f_deref secret) (f_deref impl__new) (ret_both (1 : int8)) in
    letb k2 := kdf_next (f_deref secret) (f_deref k1) (ret_both (2 : int8)) in
    letb k3 := kdf_next (f_deref secret) (f_deref k1) (ret_both (3 : int8)) in
    prod_b (k1,k2,k3) : both (t_Vec int8 t_Global × t_Vec int8 t_Global × t_Vec int8 t_Global).
Fail Next Obligation.
