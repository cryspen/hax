(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Foo : choice_type :=
  'unit.
Equations Build_t_Foo : both (t_Foo) :=
  Build_t_Foo  :=
    ret_both (tt (* Empty tuple *) : (t_Foo)) : both (t_Foo).
Fail Next Obligation.

Class t_Trait (Self : choice_type) (v_Self : v_Self) := {
}.

#[global] Program Instance t_Foo_t_Trait : t_Trait t_Foo :=
  _.
Fail Next Obligation.
Hint Unfold t_Foo_t_Trait.

Equations main_a_a (_ : both 'unit) : both 'unit :=
  main_a_a _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_b_a (_ : both 'unit) : both 'unit :=
  main_b_a _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_c_a (_ : both 'unit) : both 'unit :=
  main_c_a _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_a_b (_ : both 'unit) : both 'unit :=
  main_a_b _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_b_b (_ : both 'unit) : both 'unit :=
  main_b_b _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_c_b (_ : both 'unit) : both 'unit :=
  main_c_b _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_a_c (_ : both 'unit) : both 'unit :=
  main_a_c _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_a {v_T : v_T} `{ t_Trait v_T} (x : both v_T) : both 'unit :=
  main_a x  :=
    letb _ := main_a_a in
    letb _ := main_a_b in
    letb _ := main_a_c in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_b_c (_ : both 'unit) : both 'unit :=
  main_b_c _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_b (_ : both 'unit) : both 'unit :=
  main_b _  :=
    letb _ := main_b_a in
    letb _ := main_b_b in
    letb _ := main_b_c in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_c_c (_ : both 'unit) : both 'unit :=
  main_c_c _  :=
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main_c (_ : both 'unit) : both 'unit :=
  main_c _  :=
    letb _ := main_c_a in
    letb _ := main_c_b in
    letb _ := main_c_c in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.

Equations main (_ : both 'unit) : both 'unit :=
  main _  :=
    letb _ := main_a Foo in
    letb _ := main_b in
    letb _ := main_c in
    ret_both (tt : 'unit) : both 'unit.
Fail Next Obligation.
