(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_A : choice_type :=
  'unit.
Equations Build_t_A : both (t_A) :=
  Build_t_A  :=
    ret_both (tt (* Empty tuple *) : (t_A)) : both (t_A).
Fail Next Obligation.

Equations f_eq__impl__panic_cold_explicit (_ : both 'unit) : both t_Never :=
  f_eq__impl__panic_cold_explicit _  :=
    panic_explicit : both t_Never.
Fail Next Obligation.

#[global] Program Instance t_A_t_PartialEq : t_PartialEq t_A t_A :=
  let f_eq := fun  (self : both t_A) (other : both t_A) => never_to_any f_eq__impl__panic_cold_explicit : both 'bool in
  {| f_eq := (@f_eq)|}.
Fail Next Obligation.
Hint Unfold t_A_t_PartialEq.

Definition t_B : choice_type :=
  'unit.
Equations Build_t_B : both (t_B) :=
  Build_t_B  :=
    ret_both (tt (* Empty tuple *) : (t_B)) : both (t_B).
Fail Next Obligation.

Equations f_eq__impl_1__panic_cold_explicit (_ : both 'unit) : both t_Never :=
  f_eq__impl_1__panic_cold_explicit _  :=
    panic_explicit : both t_Never.
Fail Next Obligation.

#[global] Program Instance t_B_t_PartialEq : t_PartialEq t_B t_B :=
  let f_eq := fun  (self : both t_B) (other : both t_B) => never_to_any f_eq__impl_1__panic_cold_explicit : both 'bool in
  {| f_eq := (@f_eq)|}.
Fail Next Obligation.
Hint Unfold t_B_t_PartialEq.
