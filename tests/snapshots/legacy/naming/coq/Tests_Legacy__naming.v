(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record Foo_B_record : Type :=
  {
    Foo_B_f_x : t_usize;
  }.


#[export] Instance settable_Foo_B_record : Settable _ :=
  settable! (Build_Foo_B_record) <Foo_B_f_x>.
Inductive t_Foo : Type :=
| Foo_A
| Foo_B : Foo_B_record  -> _.



Record Foo2_B_record : Type :=
  {
    Foo2_B_f_x : t_usize;
  }.


#[export] Instance settable_Foo2_B_record : Settable _ :=
  settable! (Build_Foo2_B_record) <Foo2_B_f_x>.
Inductive t_Foo2 : Type :=
| Foo2_A
| Foo2_B : Foo2_B_record  -> _.



Record B_record : Type :=
  {
  }.

#[export]
Notation "'B_B_record'" := Build_B_record.

Record C_record : Type :=
  {
    C_f_x : t_usize;
  }.


#[export] Instance settable_C_record : Settable _ :=
  settable! (Build_C_record) <C_f_x>.

Record X_record : Type :=
  {
  }.

#[export]
Notation "'X_X_record'" := Build_X_record.

Definition mk_c '(_ : unit) : t_C :=
  let _ := Foo_B {| Foo_B_f_x := ((3 : t_usize)) |} in
  let _ := X in
  C ((3 : t_usize)).

Definition impl_Foo__f (self : t_Foo) : t_Foo :=
  Foo_A.

Definition impl_B__f (self : t_B) : t_B :=
  B.

Record Foobar_record : Type :=
  {
    Foobar_f_a : t_Foo;
  }.


#[export] Instance settable_Foobar_record : Settable _ :=
  settable! (Build_Foobar_record) <Foobar_f_a>.

Definition f__g '(_ : unit) : unit :=
  tt.

Definition f__g__impl_B__g (self : t_B) : t_usize :=
  (0 : t_usize).

Record C_f__g__impl_B__g__Foo_B_record : Type :=
  {
    C_f__g__impl_B__g__Foo_B_f__g__impl_B__g__f_x : t_usize;
  }.


#[export] Instance settable_C_f__g__impl_B__g__Foo_B_record : Settable _ :=
  settable! (Build_C_f__g__impl_B__g__Foo_B_record) <C_f__g__impl_B__g__Foo_B_f__g__impl_B__g__f_x>.
Inductive f__g__impl_B__g__t_Foo : Type :=
| C_f__g__impl_B__g__Foo_A
| C_f__g__impl_B__g__Foo_B : C_f__g__impl_B__g__Foo_B_record  -> _.



Definition f__g__impl_Foo__g (self : t_Foo) : t_usize :=
  (1 : t_usize).

Definition f (x : t_Foobar) : t_usize :=
  f__g__impl_Foo__g (f_a x).

(* NotImplementedYet *)

Definition f__g__impl_Foo__g__t_hello__h '(_ : unit) : unit :=
  tt.

Definition reserved_names (val : t_u8) (noeq : t_u8) (of : t_u8) : t_u8 :=
  f_add (f_add (val) (noeq)) (of).

Record Arity1_record (v_T : Type) : Type :=
  {
    Arity1_0 : v_T;
  }.
Arguments Build_Arity1_record {_}.
Arguments Arity1_0 {_}.
#[export] Instance settable_Arity1_record `{v_T : Type} : Settable _ :=
  settable! (Build_Arity1_record (v_T := v_T)) <Arity1_0>.
Notation "'Arity1_Arity1_record'" := Build_Arity1_record.

Class t_T1 (v_Self : Type) : Type :=
  {
  }.
Arguments t_T1 (_).

Instance t_T1_246287404 : t_T1 ((t_Foo)) :=
  {
  }.

Instance t_T1_818405735 : t_T1 (((t_Foo*t_u8))) :=
  {
  }.

Class t_T2_for_a (v_Self : Type) : Type :=
  {
  }.
Arguments t_T2_for_a (_).

Instance t_T2_for_a_1051635938 : t_T2_for_a ((t_Arity1 (((t_Foo*t_u8))))) :=
  {
  }.

Class t_T3_ee_for_a (v_Self : Type) : Type :=
  {
  }.
Arguments t_T3_ee_for_a (_).

Instance t_T3_ee_for_a_457865278 : t_T3_ee_for_a ((t_Foo)) :=
  {
  }.

Record StructA_record : Type :=
  {
    StructA_f_a : t_usize;
  }.


#[export] Instance settable_StructA_record : Settable _ :=
  settable! (Build_StructA_record) <StructA_f_a>.

Record StructB_record : Type :=
  {
    StructB_f_a : t_usize;
    StructB_f_b : t_usize;
  }.



#[export] Instance settable_StructB_record : Settable _ :=
  settable! (Build_StructB_record) <StructB_f_a; StructB_f_b>.

Record StructC_record : Type :=
  {
    StructC_f_a : t_usize;
  }.


#[export] Instance settable_StructC_record : Settable _ :=
  settable! (Build_StructC_record) <StructC_f_a>.

Record StructD_record : Type :=
  {
    StructD_f_a : t_usize;
    StructD_f_b : t_usize;
  }.



#[export] Instance settable_StructD_record : Settable _ :=
  settable! (Build_StructD_record) <StructD_f_a; StructD_f_b>.

Definition construct_structs (a : t_usize) (b : t_usize) : unit :=
  let _ := StructA (a) in
  let _ := StructB (a) (b) in
  let _ := StructC (a) in
  let _ := StructD (a) (b) in
  tt.

Definition v_INHERENT_CONSTANT : t_usize :=
  (3 : t_usize).

Class t_FooTrait (v_Self : Type) : Type :=
  {
    f_ASSOCIATED_CONSTANT : t_usize;
  }.
Arguments t_FooTrait (_).

Definition constants `{v_T : Type} `{t_FooTrait (v_T)} '(_ : unit) : t_usize :=
  f_add (f_ASSOCIATED_CONSTANT) (v_INHERENT_CONSTANT).

Definition string_shadows (string : string) (n : string) : unit :=
  tt.

Definition items_under_closures '(_ : unit) : unit :=
  let _ : unit -> unit := fun _ =>
    tt in
  tt.

Definition items_under_closures__anon_const_0__nested_function '(_ : unit) : unit :=
  tt.

Record C_items_under_closures__anon_const_0__NestedStruct_record : Type :=
  {
  }.

#[export]
Notation "'Build_t__items_under_closures__anon_const_0__NestedStruct_NestedStruct_record'" := Build_C_items_under_closures__anon_const_0__NestedStruct_record.

Definition items_under_closures__nested_function '(_ : unit) : unit :=
  tt.

Record C_items_under_closures__NestedStruct_record : Type :=
  {
  }.

#[export]
Notation "'Build_t__items_under_closures__NestedStruct_NestedStruct_record'" := Build_C_items_under_closures__NestedStruct_record.
