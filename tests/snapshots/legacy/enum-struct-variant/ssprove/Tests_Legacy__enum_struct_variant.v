(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Money : choice_type :=
  (int64).
Equations f_value (s : both t_Money) : both int64 :=
  f_value s  :=
    bind_both s (fun x =>
      ret_both (x : int64)) : both int64.
Fail Next Obligation.
Equations Build_t_Money {f_value : both int64} : both (t_Money) :=
  Build_t_Money  :=
    bind_both f_value (fun f_value =>
      ret_both ((f_value) : (t_Money))) : both (t_Money).
Fail Next Obligation.
Notation "'Build_t_Money' '[' x ']' '(' 'f_value' ':=' y ')'" := (Build_t_Money (f_value := y)).

#[global] Program Instance t_Money_t_Debug : t_Debug t_Money :=
  _.
Fail Next Obligation.
Hint Unfold t_Money_t_Debug.

(*item error backend*)

#[global] Program Instance t_EnumWithStructVariant_t_Debug : t_Debug t_EnumWithStructVariant :=
  _.
Fail Next Obligation.
Hint Unfold t_EnumWithStructVariant_t_Debug.
