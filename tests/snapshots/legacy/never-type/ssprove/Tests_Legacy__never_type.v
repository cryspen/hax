(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_False : choice_type :=
  ‚ä•.

Equations t_False_cast_to_repr (x : both t_False) : both t_Never :=
  t_False_cast_to_repr x  :=
    matchb x with
    end : both t_Never.
Fail Next Obligation.

Equations never (h : both t_False) : both t_Never :=
  never h  :=
    matchb h with
    end : both t_Never.
Fail Next Obligation.

Equations test__panic_cold_explicit (_ : both 'unit) : both t_Never :=
  test__panic_cold_explicit _  :=
    panic_explicit : both t_Never.
Fail Next Obligation.

Equations test (b : both 'bool) : both int8 :=
  test b  :=
    letb _ := ifb b
    then never_to_any test__panic_cold_explicit
    else ret_both (tt : 'unit) in
    ret_both (3 : int8) : both int8.
Fail Next Obligation.

Equations any__panic_cold_explicit (_ : both 'unit) : both t_Never :=
  any__panic_cold_explicit _  :=
    panic_explicit : both t_Never.
Fail Next Obligation.

Equations any {v_T : v_T} (_ : both 'unit) : both v_T :=
  any _  :=
    never_to_any any__panic_cold_explicit : both v_T.
Fail Next Obligation.
