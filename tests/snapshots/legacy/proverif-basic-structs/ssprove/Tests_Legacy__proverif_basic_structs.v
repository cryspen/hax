(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Definition t_Ainitial : choice_type :=
  (int8).
Equations f_x (s : both t_Ainitial) : both int8 :=
  f_x s  :=
    bind_both s (fun x =>
      ret_both (x : int8)) : both int8.
Fail Next Obligation.
Equations Build_t_Ainitial {f_x : both int8} : both (t_Ainitial) :=
  Build_t_Ainitial  :=
    bind_both f_x (fun f_x =>
      ret_both ((f_x) : (t_Ainitial))) : both (t_Ainitial).
Fail Next Obligation.
Notation "'Build_t_Ainitial' '[' x ']' '(' 'f_x' ':=' y ')'" := (Build_t_Ainitial (f_x := y)).

Definition t_A : choice_type :=
  (uint_size Ã— uint_size).
Equations f_one (s : both t_A) : both uint_size :=
  f_one s  :=
    bind_both s (fun x =>
      ret_both (fst x : uint_size)) : both uint_size.
Fail Next Obligation.
Equations f_two (s : both t_A) : both uint_size :=
  f_two s  :=
    bind_both s (fun x =>
      ret_both (snd x : uint_size)) : both uint_size.
Fail Next Obligation.
Equations Build_t_A {f_one : both uint_size} {f_two : both uint_size} : both (t_A) :=
  Build_t_A  :=
    bind_both f_two (fun f_two =>
      bind_both f_one (fun f_one =>
        ret_both ((f_one,f_two) : (t_A)))) : both (t_A).
Fail Next Obligation.
Notation "'Build_t_A' '[' x ']' '(' 'f_one' ':=' y ')'" := (Build_t_A (f_one := y) (f_two := f_two x)).
Notation "'Build_t_A' '[' x ']' '(' 'f_two' ':=' y ')'" := (Build_t_A (f_one := f_one x) (f_two := y)).

Definition t_B : choice_type :=
  (uint_size).
Equations 0 (s : both t_B) : both uint_size :=
  0 s  :=
    bind_both s (fun x =>
      ret_both (x : uint_size)) : both uint_size.
Fail Next Obligation.
Equations Build_t_B {0 : both uint_size} : both (t_B) :=
  Build_t_B  :=
    bind_both 0 (fun 0 =>
      ret_both ((0) : (t_B))) : both (t_B).
Fail Next Obligation.
Notation "'Build_t_B' '[' x ']' '(' '0' ':=' y ')'" := (Build_t_B (0 := y)).
