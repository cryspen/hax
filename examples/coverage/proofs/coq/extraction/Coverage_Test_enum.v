(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record C_test__Foo_Qux_record (v_T : Type) (v_N : t_usize) `{Core_Marker.t_Sized (v_T)} : Type :=
  {
    C_test__Foo_Qux_test__f_Foo_x : v_T;
    C_test__Foo_Qux_test__f_Foo_y : t_Array (v_T) (v_N);
    C_test__Foo_Qux_test__f_Foo_z : t_u8;
  }.
Arguments Build_C_test__Foo_Qux_record {_} {_} {_}.
Arguments C_test__Foo_Qux_test__f_Foo_x {_} {_} {_}.
Arguments C_test__Foo_Qux_test__f_Foo_y {_} {_} {_}.
Arguments C_test__Foo_Qux_test__f_Foo_z {_} {_} {_}.
#[export] Instance settable_C_test__Foo_Qux_record `{v_T : Type} `{v_N : t_usize} `{Core_Marker.t_Sized (v_T)} : Settable _ :=
  settable! (Build_C_test__Foo_Qux_record (v_T := v_T) (v_N := v_N)) <C_test__Foo_Qux_test__f_Foo_x; C_test__Foo_Qux_test__f_Foo_y; C_test__Foo_Qux_test__f_Foo_z>.
Inductive test__t_Foo (v_T : Type) (v_N : t_usize) `{Core_Marker.t_Sized (v_T)} : Type :=
| C_test__Foo_Bar : t_u8 -> _
| C_test__Foo_Baz
| C_test__Foo_Qux : C_test__Foo_Qux_record  v_T v_N -> _.
Arguments C_test__Foo_Bar {_} {_} {_}.
Arguments C_test__Foo_Baz {_} {_} {_}.
Arguments C_test__Foo_Qux {_} {_} {_}.

Inductive test__t_AnimalA : Type :=
| C_test__AnimalA_Dog
| C_test__AnimalA_Cat.



Definition test__t_AnimalA_cast_to_repr (x : test__t_AnimalA) : t_isize :=
  match x with
  | C_test__AnimalA_Dog =>
    (0 : t_isize)
  | C_test__AnimalA_Cat =>
    (1 : t_isize)
  end.

Record C_test__AnimalB_Cat_record : Type :=
  {
    C_test__AnimalB_Cat_test__f_AnimalB_name : Alloc_String.t_String;
    C_test__AnimalB_Cat_test__f_AnimalB_weight : float;
  }.



#[export] Instance settable_C_test__AnimalB_Cat_record : Settable _ :=
  settable! (Build_C_test__AnimalB_Cat_record) <C_test__AnimalB_Cat_test__f_AnimalB_name; C_test__AnimalB_Cat_test__f_AnimalB_weight>.
Inductive test__t_AnimalB : Type :=
| C_test__AnimalB_Dog : Alloc_String.t_String -> float -> _
| C_test__AnimalB_Cat : C_test__AnimalB_Cat_record  -> _.



Record C_test__Examples_StructLike_record : Type :=
  {
    C_test__Examples_StructLike_test__f_Examples_value : t_i32;
  }.


#[export] Instance settable_C_test__Examples_StructLike_record : Settable _ :=
  settable! (Build_C_test__Examples_StructLike_record) <C_test__Examples_StructLike_test__f_Examples_value>.
Inductive test__t_Examples : Type :=
| C_test__Examples_UnitLike
| C_test__Examples_TupleLike : t_i32 -> _
| C_test__Examples_StructLike : C_test__Examples_StructLike_record  -> _.




Definition test '(_ : unit) : unit :=
  let x : test__t_Foo ((t_u8)) ((12 : t_usize)) := C_test__Foo_Baz in
  let _ := tt in
  let a : test__t_AnimalA := C_test__AnimalA_Dog in
  let a := C_test__AnimalA_Cat in
  let _ := tt in
  let a : test__t_AnimalB := C_test__AnimalB_Dog (Alloc_String.ToString__f_to_string (("Cocoa"%string : string))) ((37.2%float : float)) in
  let a := C_test__AnimalB_Cat {| C_test__AnimalB_Cat_test__f_AnimalB_name := (Alloc_String.ToString__f_to_string (("Spotty"%string : string))); C_test__AnimalB_Cat_test__f_AnimalB_weight := ((2.7%float : float)) |} in
  let _ := tt in
  let x := C_test__Examples_UnitLike in
  let x := C_test__Examples_UnitLike in
  let y := C_test__Examples_TupleLike ((123 : t_i32)) in
  let y := C_test__Examples_TupleLike ((123 : t_i32)) in
  let z := C_test__Examples_StructLike {| C_test__Examples_StructLike_test__f_Examples_value := ((123 : t_i32)) |} in
  let _ := tt in
  tt.

Record C_test__Enum_Struct_record : Type :=
  {
    C_test__Enum_Struct_test__f_Enum_a : t_u8;
    C_test__Enum_Struct_test__f_Enum_b : t_u16;
  }.



#[export] Instance settable_C_test__Enum_Struct_record : Settable _ :=
  settable! (Build_C_test__Enum_Struct_record) <C_test__Enum_Struct_test__f_Enum_a; C_test__Enum_Struct_test__f_Enum_b>.
Inductive test__t_Enum : Type :=
| C_test__Enum_Unit
| C_test__Enum_Tuple : t_u16 -> _
| C_test__Enum_Struct : C_test__Enum_Struct_record  -> _.




Definition test__Enum_Unit__anon_const_0 : t_u8 :=
  (3 : t_u8).

Definition test__Enum_Struct__anon_const_0 : t_u8 :=
  (1 : t_u8).
