---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: let-else
    manifest: let-else/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Let_else.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.



(* NotImplementedYet *)

Definition let_else (opt : core.option.t_Option ((t_u32))) : bool :=
  rust_primitives.hax.control_flow_monad.mexception.run (match opt with
  | core.option.Option_Some (x) =>
    core.ops.control_flow.ControlFlow_Continue ((true : bool))
  | _ =>
    core.ops.control_flow.ControlFlow_Break ((false : bool))
  end).

Definition let_else_different_type (opt : core.option.t_Option ((t_u32))) : bool :=
  rust_primitives.hax.control_flow_monad.mexception.run (let hoist1 := match opt with
  | core.option.Option_Some (x) =>
    core.ops.control_flow.ControlFlow_Continue (core.option.Option_Some (core.ops.arith.Add__f_add (x) ((1 : t_u32))))
  | _ =>
    core.ops.control_flow.ControlFlow_Break ((false : bool))
  end in
  core.ops.control_flow.ControlFlow_Continue (let_else (hoist1))).
'''
_CoqProject = '''
-R ./ TODO
-arg -w
-arg all

Let_else.v'''
