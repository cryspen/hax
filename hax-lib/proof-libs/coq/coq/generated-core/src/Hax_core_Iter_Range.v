(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)



Class t_Step (v_Self : Type) `{core.marker.t_Sized (v_Self)} `{core.clone.t_Clone (v_Self)} `{core.cmp.t_PartialOrd (v_Self) (v_Self)} : Type :=
  {
    Step__f_steps_between : v_Self -> v_Self -> core.option.t_Option ((hax_core.primitive.primitive_definitions.t_usize));
    Step__f_forward_checked : v_Self -> hax_core.primitive.primitive_definitions.t_usize -> core.option.t_Option ((v_Self));
  }.
Arguments t_Step (_) {_} {_} {_}.

(* NotImplementedYet *)















Instance t_Step_335794482 : t_Step ((hax_core.primitive.primitive_definitions.t_u8)) :=
  {
    implaabbcc_t_Step_impl_2__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_u8) (v_end : hax_core.primitive.primitive_definitions.t_u8)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.option.Option_Some (core.convert.Into__f_into (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_2__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_u8) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      match core.convert.TryFrom__f_try_from (n) with
      | core.result.Result_Ok (n) =>
        hax_core.num.impl_6__checked_add (start) (n)
      | core.result.Result_Err (_) =>
        core.option.Option_None
      end;
  }.

Instance t_Step_228543192 : t_Step ((hax_core.primitive.primitive_definitions.t_u16)) :=
  {
    implaabbcc_t_Step_impl_3__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_u16) (v_end : hax_core.primitive.primitive_definitions.t_u16)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.option.Option_Some (core.convert.Into__f_into (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_3__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_u16) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      match core.convert.TryFrom__f_try_from (n) with
      | core.result.Result_Ok (n) =>
        hax_core.num.impl_7__checked_add (start) (n)
      | core.result.Result_Err (_) =>
        core.option.Option_None
      end;
  }.

Instance t_Step_38015461 : t_Step ((hax_core.primitive.primitive_definitions.t_u32)) :=
  {
    implaabbcc_t_Step_impl_4__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_u32) (v_end : hax_core.primitive.primitive_definitions.t_u32)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.option.Option_Some (core.convert.Into__f_into (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_4__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_u32) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      match core.convert.TryFrom__f_try_from (n) with
      | core.result.Result_Ok (n) =>
        hax_core.num.impl_8__checked_add (start) (n)
      | core.result.Result_Err (_) =>
        core.option.Option_None
      end;
  }.

Instance t_Step_961844029 : t_Step ((hax_core.primitive.primitive_definitions.t_u64)) :=
  {
    implaabbcc_t_Step_impl_5__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_u64) (v_end : hax_core.primitive.primitive_definitions.t_u64)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.option.Option_Some (core.convert.Into__f_into (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_5__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_u64) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      match core.convert.TryFrom__f_try_from (n) with
      | core.result.Result_Ok (n) =>
        hax_core.num.impl_9__checked_add (start) (n)
      | core.result.Result_Err (_) =>
        core.option.Option_None
      end;
  }.

Instance t_Step_748498709 : t_Step ((hax_core.primitive.primitive_definitions.t_usize)) :=
  {
    implaabbcc_t_Step_impl_6__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_usize) (v_end : hax_core.primitive.primitive_definitions.t_usize)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.option.Option_Some (core.convert.Into__f_into (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_6__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_usize) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      match core.convert.TryFrom__f_try_from (n) with
      | core.result.Result_Ok (n) =>
        hax_core.num.impl_11__checked_add (start) (n)
      | core.result.Result_Err (_) =>
        core.option.Option_None
      end;
  }.

Instance t_Step_782250457 : t_Step ((hax_core.primitive.primitive_definitions.t_u128)) :=
  {
    implaabbcc_t_Step_impl_7__f_steps_between := fun  (start : hax_core.primitive.primitive_definitions.t_u128) (v_end : hax_core.primitive.primitive_definitions.t_u128)=>
      if
        core.cmp.PartialOrd__f_le (start) (v_end)
      then
        core.result.impl__ok (core.convert.TryFrom__f_try_from (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (v_end)) (core.clone.Clone__f_clone (start))))
      else
        core.option.Option_None;
    implaabbcc_t_Step_impl_7__f_forward_checked := fun  (start : hax_core.primitive.primitive_definitions.t_u128) (n : hax_core.primitive.primitive_definitions.t_usize)=>
      core.option.Option_None;
  }.

Class t_RangeIteratorImpl (v_Self : Type) : Type :=
  {
    RangeIteratorImpl__f_Item : Type;
    _ :: `{core.marker.t_Sized (RangeIteratorImpl__f_Item)};
    RangeIteratorImpl__f_spec_next : v_Self -> (v_Self*core.option.t_Option ((RangeIteratorImpl__f_Item)));
  }.
Arguments t_RangeIteratorImpl (_).

Instance core.iter.traits.iterator.t_Iterator_937789816 `{v_A : Type} `{core.marker.t_Sized (v_A)} `{t_Step (v_A)} : core.iter.traits.iterator.t_Iterator ((hax_core.ops.range.t_Range ((v_A)))) :=
  {
    implaabbcc_t_Iterator_impl_1__f_Item := v_A;
    implaabbcc_t_Iterator_impl_1__f_next := fun  (self : hax_core.ops.range.t_Range ((v_A)))=>
      let hax_temp_output := rust_primitives.hax.never_to_any (core.panicking.panic_fmt (core.fmt.rt.impl_1__new_v1 ([("not yet implemented: specification needed"%string : string)]) ([]))) in
      (self,hax_temp_output);
    implaabbcc_t_Iterator_impl_1__f_size_hint := fun  (self : hax_core.ops.range.t_Range ((v_A)))=>
      if
        core.cmp.PartialOrd__f_lt (hax_core.ops.range.f_Range_start self) (hax_core.ops.range.f_Range_end self)
      then
        let hint := Step__f_steps_between (hax_core.ops.range.f_Range_start self) (hax_core.ops.range.f_Range_end self) in
        ((0 : t_usize),core.option.Option_Some ((0 : t_usize)))
      else
        ((0 : t_usize),core.option.Option_Some ((0 : t_usize)));
  }.

Instance t_RangeIteratorImpl_1013796080 `{v_A : Type} `{core.marker.t_Sized (v_A)} `{t_Step (v_A)} : t_RangeIteratorImpl ((hax_core.ops.range.t_Range ((v_A)))) :=
  {
    implaabbcc_t_RangeIteratorImpl_impl__f_Item := v_A;
    implaabbcc_t_RangeIteratorImpl_impl__f_spec_next := fun  (self : hax_core.ops.range.t_Range ((v_A)))=>
      let hax_temp_output := rust_primitives.hax.never_to_any (core.panicking.panic_fmt (core.fmt.rt.impl_1__new_v1 ([("not yet implemented: specification needed"%string : string)]) ([]))) in
      (self,hax_temp_output);
  }.
