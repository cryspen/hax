(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)



(* NotImplementedYet *)

Class t_Add (v_Self : Type) (v_Rhs : Type) `{core.marker.t_Sized (v_Rhs)} : Type :=
  {
    Add__f_Output : Type;
    _ :: `{core.marker.t_Sized (Add__f_Output)};
    Add__f_add : v_Self -> v_Rhs -> Add__f_Output;
  }.
Arguments t_Add (_) (_) {_}.

Class t_Sub (v_Self : Type) (v_Rhs : Type) `{core.marker.t_Sized (v_Rhs)} : Type :=
  {
    Sub__f_Output : Type;
    _ :: `{core.marker.t_Sized (Sub__f_Output)};
    Sub__f_sub : v_Self -> v_Rhs -> Sub__f_Output;
  }.
Arguments t_Sub (_) (_) {_}.

Class t_Mul (v_Self : Type) (v_Rhs : Type) `{core.marker.t_Sized (v_Rhs)} : Type :=
  {
    Mul__f_Output : Type;
    _ :: `{core.marker.t_Sized (Mul__f_Output)};
    Mul__f_mul : v_Self -> v_Rhs -> Mul__f_Output;
  }.
Arguments t_Mul (_) (_) {_}.

Class t_Div (v_Self : Type) (v_Rhs : Type) `{core.marker.t_Sized (v_Rhs)} : Type :=
  {
    Div__f_Output : Type;
    _ :: `{core.marker.t_Sized (Div__f_Output)};
    Div__f_div : v_Self -> v_Rhs -> Div__f_Output;
  }.
Arguments t_Div (_) (_) {_}.

Class t_Rem (v_Self : Type) (v_Rhs : Type) `{core.marker.t_Sized (v_Rhs)} : Type :=
  {
    Rem__f_Output : Type;
    _ :: `{core.marker.t_Sized (Rem__f_Output)};
    Rem__f_rem : v_Self -> v_Rhs -> Rem__f_Output;
  }.
Arguments t_Rem (_) (_) {_}.

Class t_Neg (v_Self : Type) : Type :=
  {
    Neg__f_Output : Type;
    _ :: `{core.marker.t_Sized (Neg__f_Output)};
    Neg__f_neg : v_Self -> Neg__f_Output;
  }.
Arguments t_Neg (_).
