(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record Seq_Seq_record (v_T : Type) `{core.marker.t_Sized (v_T)} : Type :=
  {
    Seq_Seq_f_Seq_v : alloc.vec.t_Vec ((v_T)) ((alloc.alloc.t_Global));
  }.
Arguments Build_Seq_Seq_record {_} {_}.
Arguments Seq_Seq_f_Seq_v {_} {_}.
#[export] Instance settable_Seq_Seq_record `{v_T : Type} `{core.marker.t_Sized (v_T)} : Settable _ :=
  settable! (Build_Seq_Seq_record (v_T := v_T)) <Seq_Seq_f_Seq_v>.

Inductive t_LIST (v_T : Type) `{core.marker.t_Sized (v_T)} : Type :=
| LIST_NIL
| LIST_CONS : v_T -> t_Seq ((v_T)) -> _.
Arguments LIST_NIL {_} {_}.
Arguments LIST_CONS {_} {_}.

Instance core.clone.t_Clone_1040068441 `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} : core.clone.t_Clone ((t_Seq ((v_T)))) :=
  {
    implaabbcc_t_Clone_impl__f_clone := fun  (self : t_Seq ((v_T)))=>
      Seq_Seq (core.clone.Clone__f_clone (f_Seq_v self));
  }.

Definition match_list `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : t_Seq ((v_T))) : t_LIST ((v_T)) :=
  if
    core.cmp.PartialEq__f_eq (alloc.vec.impl_1__len (f_Seq_v s)) ((0 : t_usize))
  then
    LIST_NIL
  else
    LIST_CONS (core.clone.Clone__f_clone (core.ops.index.Index__f_index (f_Seq_v s) ((0 : t_usize)))) (Seq_Seq (alloc.slice.impl__concat (rust_primitives.unsize ([core.ops.index.Index__f_index (f_Seq_v s) (core.ops.range.RangeFrom_RangeFrom ((1 : t_usize)))])))).

Definition nil `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} '(_ : unit) : t_Seq ((v_T)) :=
  Seq_Seq (alloc.vec.impl__new (tt)).

Definition cons `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : t_Seq ((v_T))) (t : v_T) : t_Seq ((v_T)) :=
  Seq_Seq (alloc.slice.impl__concat (rust_primitives.unsize ([core.ops.index.Index__f_index ([t]) (core.ops.range.RangeFull_RangeFull); core.ops.index.Index__f_index (f_Seq_v s) (core.ops.range.RangeFull_RangeFull)]))).
