(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)







Inductive t_Mask : Type :=
| Mask_IsPos : Core_Base_Spec_Binary_Positive.t_Positive -> _
| Mask_IsNul
| Mask_IsNeg.




Definition haxint_cmp (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Cmp.t_Ordering :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Cmp.Ordering_Equal
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      Core_Cmp.Ordering_Less
    end
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Cmp.Ordering_Greater
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      Core_Base_Binary.positive_cmp (p) (q)
    end
  end.

Definition haxint_lt (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : bool :=
  match Core_Option.Option_Some (haxint_cmp (lhs) (rhs)) with
  | Core_Option.Option_Some (Core_Cmp.Ordering_Less) =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition haxint_le (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : bool :=
  match Core_Option.Option_Some (haxint_cmp (lhs) (rhs)) with
  | Core_Option.Option_Some (Core_Cmp.Ordering_Less
  | Core_Cmp.Ordering_Equal) =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition haxint_add (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    rhs
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Binary.positive_add (p) (q))
    end
  end.

Definition haxint_sub__double_pred_mask (lhs : Core_Base_Spec_Binary_Positive.t_Positive) : t_Mask :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    Mask_IsNul
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    Mask_IsPos (Core_Base_Spec_Binary_Positive.xO (Core_Base_Binary.positive_pred_double (p)))
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    Mask_IsPos (Core_Base_Spec_Binary_Positive.xO (Core_Base_Spec_Binary_Positive.xO (p)))
  end.

Definition haxint_sub__succ_double_mask (lhs : t_Mask) : t_Mask :=
  match lhs with
  | Mask_IsNeg =>
    Mask_IsNeg
  | Mask_IsNul =>
    Mask_IsPos (Core_Base_Spec_Binary_Positive.xH)
  | Mask_IsPos (p) =>
    Mask_IsPos (Core_Base_Spec_Binary_Positive.xI (p))
  end.

Definition haxint_sub__double_mask (lhs : t_Mask) : t_Mask :=
  match lhs with
  | Mask_IsNeg =>
    Mask_IsNeg
  | Mask_IsNul =>
    Mask_IsNul
  | Mask_IsPos (p) =>
    Mask_IsPos (Core_Base_Spec_Binary_Positive.xO (p))
  end.

Definition haxint_double (s : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (s) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Haxint.v_HaxInt_ZERO
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Spec_Binary_Positive.xO (p))
  end.

Definition haxint_succ_double (s : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Pos.match_pos (s) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Binary_Positive.xH
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    Core_Base_Spec_Binary_Positive.xI (p)
  end.

Definition haxint_mul (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Haxint.v_HaxInt_ZERO
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Binary.positive_mul (p) (q))
    end
  end.

Definition haxint_shr__half (s : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (s) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Haxint.v_HaxInt_ZERO
  | Core_Base_Spec_Binary_Pos.POS_POS (n) =>
    match Core_Base_Spec_Binary_Positive.match_positive (n) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    end
  end.

Definition haxint_sub (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Haxint.v_HaxInt_ZERO
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      match haxint_sub__sub_binary (p) (q) with
      | Mask_IsPos (v) =>
        Core_Base_Spec_Binary_Positive.positive_to_int (v)
      | _ =>
        Core_Base_Spec_Haxint.v_HaxInt_ZERO
      end
    end
  end.

Fixpoint power_of_two (s : Core_Base_Spec_Unary.t_Unary) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Unary.match_unary (s) with
  | Core_Base_Spec_Unary.UNARY_ZERO =>
    Core_Base_Spec_Binary_Positive.xH
  | Core_Base_Spec_Unary.UNARY_SUCC (x) =>
    Core_Base_Spec_Binary_Positive.xO (power_of_two (x))
  end.

Fixpoint haxint_shl__shl_helper (rhs : Core_Base_Spec_Unary.t_Unary) (lhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  if
    Core_Base_Spec_Haxint.is_zero (Core_Clone.Clone__f_clone (lhs))
  then
    lhs
  else
    match Core_Base_Spec_Unary.match_unary (rhs) with
    | Core_Base_Spec_Unary.UNARY_ZERO =>
      lhs
    | Core_Base_Spec_Unary.UNARY_SUCC (n) =>
      haxint_shl__shl_helper (n) (haxint_double (lhs))
    end.

Fixpoint haxint_shr__shr_helper (rhs : Core_Base_Spec_Unary.t_Unary) (lhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  if
    Core_Base_Spec_Haxint.is_zero (Core_Clone.Clone__f_clone (lhs))
  then
    lhs
  else
    match Core_Base_Spec_Unary.match_unary (rhs) with
    | Core_Base_Spec_Unary.UNARY_ZERO =>
      lhs
    | Core_Base_Spec_Unary.UNARY_SUCC (n) =>
      haxint_shr__shr_helper (n) (haxint_shr__half (lhs))
    end.

Fixpoint bitxor_binary (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Spec_Binary_Positive.xI (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Spec_Binary_Positive.xO (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Spec_Binary_Positive.xI (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_double (bitxor_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (bitxor_binary (p) (q)))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.positive_to_int (Core_Base_Spec_Binary_Positive.xO (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (bitxor_binary (p) (q)))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_double (bitxor_binary (p) (q))
    end
  end.

Fixpoint bitand_binary (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (_)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Haxint.v_HaxInt_ONE
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_double (bitand_binary (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Haxint.v_HaxInt_ONE
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_double (bitand_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (bitand_binary (p) (q)))
    end
  end.

Fixpoint bitor_binary (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xI (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xH
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (q)
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xI (p)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xO (bitor_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (bitor_binary (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xI (p)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (bitor_binary (p) (q))
    end
  end.

Definition haxint_shl (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  haxint_shl__shl_helper (Core_Base_Spec_Unary.unary_from_int (rhs)) (lhs).

Definition haxint_shr (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  haxint_shr__shr_helper (Core_Base_Spec_Unary.unary_from_int (rhs)) (lhs).

Definition haxint_bitxor (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    rhs
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      bitxor_binary (p) (q)
    end
  end.

Definition haxint_bitand (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    Core_Base_Spec_Haxint.v_HaxInt_ZERO
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Haxint.v_HaxInt_ZERO
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      bitand_binary (p) (q)
    end
  end.

Definition haxint_bitor (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  match Core_Base_Spec_Binary_Pos.match_pos (lhs) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    rhs
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (rhs) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      Core_Base_Spec_Binary_Positive.positive_to_int (p)
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      Core_Base_Spec_Binary_Positive.positive_to_int (bitor_binary (p) (q))
    end
  end.

Fixpoint haxint_divmod__divmod_binary (a : Core_Base_Spec_Binary_Positive.t_Positive) (b : Core_Base_Spec_Binary_Positive.t_Positive) : (Core_Base_Spec_Haxint.t_HaxInt*Core_Base_Spec_Haxint.t_HaxInt) :=
  match Core_Base_Spec_Binary_Positive.match_positive (a) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (b) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      (Core_Base_Spec_Haxint.v_HaxInt_ONE,Core_Base_Spec_Haxint.v_HaxInt_ZERO)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      (Core_Base_Spec_Haxint.v_HaxInt_ZERO,Core_Base_Spec_Haxint.v_HaxInt_ONE)
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (a_) =>
    let (q,r) := haxint_divmod__divmod_binary (a_) (Core_Clone.Clone__f_clone (b)) in
    let r_ := haxint_double (r) in
    if
      haxint_le (Core_Base_Spec_Binary_Positive.positive_to_int (Core_Clone.Clone__f_clone (b))) (Core_Clone.Clone__f_clone (r_))
    then
      (Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (q)),haxint_sub (r_) (Core_Base_Spec_Binary_Positive.positive_to_int (b)))
    else
      (haxint_double (q),r_)
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (a_) =>
    let (q,r) := haxint_divmod__divmod_binary (a_) (Core_Clone.Clone__f_clone (b)) in
    let r_ := Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (r)) in
    if
      haxint_le (Core_Base_Spec_Binary_Positive.positive_to_int (Core_Clone.Clone__f_clone (b))) (Core_Clone.Clone__f_clone (r_))
    then
      (Core_Base_Spec_Binary_Positive.positive_to_int (haxint_succ_double (q)),haxint_sub (r_) (Core_Base_Spec_Binary_Positive.positive_to_int (b)))
    else
      (haxint_double (q),r_)
  end.

Definition haxint_divmod (a : Core_Base_Spec_Haxint.t_HaxInt) (b : Core_Base_Spec_Haxint.t_HaxInt) : (Core_Base_Spec_Haxint.t_HaxInt*Core_Base_Spec_Haxint.t_HaxInt) :=
  match Core_Base_Spec_Binary_Pos.match_pos (a) with
  | Core_Base_Spec_Binary_Pos.POS_ZERO =>
    (Core_Base_Spec_Haxint.v_HaxInt_ZERO,Core_Base_Spec_Haxint.v_HaxInt_ZERO)
  | Core_Base_Spec_Binary_Pos.POS_POS (p) =>
    match Core_Base_Spec_Binary_Pos.match_pos (b) with
    | Core_Base_Spec_Binary_Pos.POS_ZERO =>
      (Core_Base_Spec_Haxint.v_HaxInt_ZERO,Core_Base_Spec_Binary_Positive.positive_to_int (p))
    | Core_Base_Spec_Binary_Pos.POS_POS (q) =>
      haxint_divmod__divmod_binary (p) (q)
    end
  end.

Definition haxint_div (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  let (q,_) := haxint_divmod (lhs) (rhs) in
  q.

Definition haxint_rem (lhs : Core_Base_Spec_Haxint.t_HaxInt) (rhs : Core_Base_Spec_Haxint.t_HaxInt) : Core_Base_Spec_Haxint.t_HaxInt :=
  let (_,r) := haxint_divmod (lhs) (rhs) in
  r.

Fixpoint haxint_sub__sub_carry (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : t_Mask :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    Mask_IsNeg
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      haxint_sub__double_pred_mask (p)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_sub__succ_double_mask (haxint_sub__sub_carry (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_sub__double_mask (haxint_sub__sub_carry (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Mask_IsPos (Core_Base_Binary.positive_pred_double (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_sub__double_mask (haxint_sub__sub_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_sub__succ_double_mask (haxint_sub__sub_carry (p) (q))
    end
  end.

Fixpoint haxint_sub__sub_binary (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : t_Mask :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    Mask_IsNeg
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Mask_IsPos (Core_Base_Binary.positive_pred_double (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_sub__double_mask (haxint_sub__sub_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_sub__succ_double_mask (haxint_sub__sub_carry (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Mask_IsPos (Core_Base_Spec_Binary_Positive.xO (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      haxint_sub__succ_double_mask (haxint_sub__sub_binary (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      haxint_sub__double_mask (haxint_sub__sub_binary (p) (q))
    end
  end.
