(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Record HaxInt_HaxInt_record : Type :=
  {
    HaxInt_HaxInt_f_HaxInt_v : alloc.borrow.t_Cow ((t_Slice t_u8));
  }.


#[export] Instance settable_HaxInt_HaxInt_record : Settable _ :=
  settable! (Build_HaxInt_HaxInt_record) <HaxInt_HaxInt_f_HaxInt_v>.

Instance core.clone.t_Clone_618174783 : core.clone.t_Clone ((t_HaxInt)) :=
  {
    implaabbcc_t_Clone_impl__f_clone := fun  (self : t_HaxInt)=>
      rust_primitives.hax.never_to_any (core.panicking.panic_fmt (core.fmt.rt.impl_1__new_v1 ([("not yet implemented: specification needed"%string : string)]) ([])));
  }.

Definition v_HaxInt_ZERO : t_HaxInt :=
  HaxInt_HaxInt (alloc.borrow.Cow_Borrowed (rust_primitives.unsize ([]))).

Definition v_HaxInt_ONE : t_HaxInt :=
  HaxInt_HaxInt (alloc.borrow.Cow_Borrowed (rust_primitives.unsize ([(1 : t_u8)]))).

Definition v_HaxInt_TWO : t_HaxInt :=
  HaxInt_HaxInt (alloc.borrow.Cow_Borrowed (rust_primitives.unsize ([(2 : t_u8)]))).

Definition is_zero (s : t_HaxInt) : bool :=
  rust_primitives.hax.never_to_any (core.panicking.panic_fmt (core.fmt.rt.impl_1__new_v1 ([("not yet implemented: specification needed"%string : string)]) ([]))).

Definition div2 (s : t_HaxInt) : t_HaxInt :=
  rust_primitives.hax.never_to_any (core.panicking.panic_fmt (core.fmt.rt.impl_1__new_v1 ([("not yet implemented: specification needed"%string : string)]) ([]))).
