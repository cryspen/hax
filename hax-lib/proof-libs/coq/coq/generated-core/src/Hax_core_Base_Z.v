(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)









Definition z_cmp (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : core.cmp.t_Ordering :=
  match lhs with
  | hax_core.base.spec.z.Z_NEG (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_NEG (q) =>
      match hax_core.base.binary.positive_cmp (p) (q) with
      | core.cmp.Ordering_Equal =>
        core.cmp.Ordering_Equal
      | core.cmp.Ordering_Less =>
        core.cmp.Ordering_Greater
      | core.cmp.Ordering_Greater =>
        core.cmp.Ordering_Less
      end
    | _ =>
      core.cmp.Ordering_Less
    end
  | hax_core.base.spec.z.Z_ZERO =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      core.cmp.Ordering_Equal
    | hax_core.base.spec.z.Z_POS (_) =>
      core.cmp.Ordering_Less
    | hax_core.base.spec.z.Z_NEG (_) =>
      core.cmp.Ordering_Greater
    end
  | hax_core.base.spec.z.Z_POS (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_POS (q) =>
      hax_core.base.binary.positive_cmp (p) (q)
    | _ =>
      core.cmp.Ordering_Greater
    end
  end.

Definition z_le (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : bool :=
  match core.option.Option_Some (z_cmp (lhs) (rhs)) with
  | core.option.Option_Some (core.cmp.Ordering_Less
  | core.cmp.Ordering_Equal) =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition z_lt (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : bool :=
  match core.option.Option_Some (z_cmp (lhs) (rhs)) with
  | core.option.Option_Some (core.cmp.Ordering_Less) =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition z_add__z_pred_double (s : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match s with
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_NEG (hax_core.base.spec.binary.positive.xH)
  | hax_core.base.spec.z.Z_POS (p) =>
    hax_core.base.spec.z.Z_POS (hax_core.base.binary.positive_pred_double (p))
  | hax_core.base.spec.z.Z_NEG (p) =>
    hax_core.base.spec.z.Z_NEG (hax_core.base.spec.binary.positive.xI (p))
  end.

Definition z_add__z_double (s : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match s with
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_ZERO
  | hax_core.base.spec.z.Z_POS (p) =>
    hax_core.base.spec.z.Z_POS (hax_core.base.spec.binary.positive.xO (p))
  | hax_core.base.spec.z.Z_NEG (p) =>
    hax_core.base.spec.z.Z_NEG (hax_core.base.spec.binary.positive.xO (p))
  end.

Definition z_add__z_succ_double (s : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match s with
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_POS (hax_core.base.spec.binary.positive.xH)
  | hax_core.base.spec.z.Z_POS (p) =>
    hax_core.base.spec.z.Z_POS (hax_core.base.spec.binary.positive.xI (p))
  | hax_core.base.spec.z.Z_NEG (p) =>
    hax_core.base.spec.z.Z_NEG (hax_core.base.binary.positive_pred_double (p))
  end.

Definition z_neg (x : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match x with
  | hax_core.base.spec.z.Z_NEG (p) =>
    hax_core.base.spec.z.Z_POS (p)
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_ZERO
  | hax_core.base.spec.z.Z_POS (p) =>
    hax_core.base.spec.z.Z_NEG (p)
  end.

Definition z_mul (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match lhs with
  | hax_core.base.spec.z.Z_NEG (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_NEG (q) =>
      hax_core.base.spec.z.Z_POS (hax_core.base.binary.positive_mul (p) (q))
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (q) =>
      hax_core.base.spec.z.Z_NEG (hax_core.base.binary.positive_mul (p) (q))
    end
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_ZERO
  | hax_core.base.spec.z.Z_POS (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_NEG (q) =>
      hax_core.base.spec.z.Z_NEG (hax_core.base.binary.positive_mul (p) (q))
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (q) =>
      hax_core.base.spec.z.Z_POS (hax_core.base.binary.positive_mul (p) (q))
    end
  end.

Definition haxint_ldiff__n_double (x : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match x with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.binary.pos.POS_ZERO
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xO (p))
  end.

Definition haxint_ldiff__n_succ_double (x : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match x with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xH)
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xI (p))
  end.

Definition n_succ (x : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.positive.t_Positive :=
  match x with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.binary.positive.xH
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    hax_core.base.spec.binary.positive.positive_from_int (hax_core.base.spec.unary.unary_to_int (hax_core.base.spec.unary.succ (hax_core.base.spec.unary.unary_from_int (hax_core.base.spec.binary.positive.positive_to_int (p)))))
  end.

Definition positive_pred_N (x : hax_core.base.spec.binary.positive.t_Positive) : hax_core.base.spec.binary.pos.t_POS :=
  match hax_core.base.spec.binary.positive.match_positive (x) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    hax_core.base.spec.binary.pos.POS_ZERO
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xO (p))
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    hax_core.base.spec.binary.pos.POS_POS (hax_core.base.binary.positive_pred_double (p))
  end.

Definition z_bitor__n_and (lhs : hax_core.base.spec.binary.pos.t_POS) (rhs : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match lhs with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.binary.pos.POS_ZERO
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    match rhs with
    | hax_core.base.spec.binary.pos.POS_ZERO =>
      hax_core.base.spec.binary.pos.POS_ZERO
    | hax_core.base.spec.binary.pos.POS_POS (q) =>
      hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.bitand_binary (p) (q))
    end
  end.

Definition z_of_n (x : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.z.t_Z :=
  match x with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.z.Z_ZERO
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    hax_core.base.spec.z.Z_POS (p)
  end.

Definition z_bitand__n_or (lhs : hax_core.base.spec.binary.pos.t_POS) (rhs : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match lhs with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    rhs
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    match rhs with
    | hax_core.base.spec.binary.pos.POS_ZERO =>
      hax_core.base.spec.binary.pos.POS_POS (p)
    | hax_core.base.spec.binary.pos.POS_POS (q) =>
      hax_core.base.spec.binary.pos.POS_POS (hax_core.base.pos.bitor_binary (p) (q))
    end
  end.

Definition z_bitxor__n_xor (lhs : hax_core.base.spec.binary.pos.t_POS) (rhs : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match lhs with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    rhs
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    match rhs with
    | hax_core.base.spec.binary.pos.POS_ZERO =>
      hax_core.base.spec.binary.pos.POS_POS (p)
    | hax_core.base.spec.binary.pos.POS_POS (q) =>
      hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.bitxor_binary (p) (q))
    end
  end.

Definition z_bitxor (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match lhs with
  | hax_core.base.spec.z.Z_ZERO =>
    rhs
  | hax_core.base.spec.z.Z_POS (a) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_POS (a)
    | hax_core.base.spec.z.Z_POS (b) =>
      z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.bitxor_binary (a) (b)))
    | hax_core.base.spec.z.Z_NEG (b) =>
      hax_core.base.spec.z.Z_NEG (n_succ (z_bitxor__n_xor (hax_core.base.spec.binary.pos.POS_POS (a)) (positive_pred_N (b))))
    end
  | hax_core.base.spec.z.Z_NEG (a) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_NEG (a)
    | hax_core.base.spec.z.Z_POS (b) =>
      hax_core.base.spec.z.Z_NEG (n_succ (z_bitxor__n_xor (positive_pred_N (a)) (hax_core.base.spec.binary.pos.POS_POS (b))))
    | hax_core.base.spec.z.Z_NEG (b) =>
      z_of_n (z_bitxor__n_xor (positive_pred_N (a)) (positive_pred_N (b)))
    end
  end.

Definition z_shl (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match rhs with
  | hax_core.base.spec.z.Z_ZERO =>
    lhs
  | hax_core.base.spec.z.Z_POS (p) =>
    match lhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (q) =>
      z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.haxint_shl (hax_core.base.spec.binary.positive.positive_to_int (q)) (hax_core.base.spec.binary.positive.positive_to_int (p))))
    | hax_core.base.spec.z.Z_NEG (q) =>
      z_neg (z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.haxint_shl (hax_core.base.spec.binary.positive.positive_to_int (q)) (hax_core.base.spec.binary.positive.positive_to_int (p)))))
    end
  | hax_core.base.spec.z.Z_NEG (p) =>
    match lhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (q) =>
      z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.haxint_shr (hax_core.base.spec.binary.positive.positive_to_int (q)) (hax_core.base.spec.binary.positive.positive_to_int (p))))
    | hax_core.base.spec.z.Z_NEG (q) =>
      z_neg (z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.haxint_shr (hax_core.base.spec.binary.positive.positive_to_int (q)) (hax_core.base.spec.binary.positive.positive_to_int (p)))))
    end
  end.

Definition z_shr (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  z_shl (lhs) (z_neg (rhs)).

Fixpoint z_add__pos_z_sub (x : hax_core.base.spec.binary.positive.t_Positive) (y : hax_core.base.spec.binary.positive.t_Positive) : hax_core.base.spec.z.t_Z :=
  match hax_core.base.spec.binary.positive.match_positive (x) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    match hax_core.base.spec.binary.positive.match_positive (y) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.binary.positive.POSITIVE_XO (q) =>
      hax_core.base.spec.z.Z_NEG (hax_core.base.binary.positive_pred_double (q))
    | hax_core.base.spec.binary.positive.POSITIVE_XI (q) =>
      hax_core.base.spec.z.Z_NEG (hax_core.base.spec.binary.positive.xO (q))
    end
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    match hax_core.base.spec.binary.positive.match_positive (y) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.z.Z_POS (hax_core.base.binary.positive_pred_double (p))
    | hax_core.base.spec.binary.positive.POSITIVE_XO (q) =>
      z_add__z_double (z_add__pos_z_sub (p) (q))
    | hax_core.base.spec.binary.positive.POSITIVE_XI (q) =>
      z_add__z_pred_double (z_add__pos_z_sub (p) (q))
    end
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    match hax_core.base.spec.binary.positive.match_positive (y) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.z.Z_POS (hax_core.base.spec.binary.positive.xO (p))
    | hax_core.base.spec.binary.positive.POSITIVE_XO (q) =>
      z_add__z_succ_double (z_add__pos_z_sub (p) (q))
    | hax_core.base.spec.binary.positive.POSITIVE_XI (q) =>
      z_add__z_double (z_add__pos_z_sub (p) (q))
    end
  end.

Fixpoint haxint_ldiff__positive_ldiff (lhs : hax_core.base.spec.binary.positive.t_Positive) (rhs : hax_core.base.spec.binary.positive.t_Positive) : hax_core.base.spec.binary.pos.t_POS :=
  match hax_core.base.spec.binary.positive.match_positive (lhs) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    match hax_core.base.spec.binary.positive.match_positive (rhs) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.binary.pos.POS_ZERO
    | hax_core.base.spec.binary.positive.POSITIVE_XO (_) =>
      hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xH)
    | hax_core.base.spec.binary.positive.POSITIVE_XI (_) =>
      hax_core.base.spec.binary.pos.POS_ZERO
    end
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    match hax_core.base.spec.binary.positive.match_positive (rhs) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xO (p))
    | hax_core.base.spec.binary.positive.POSITIVE_XO (q) =>
      haxint_ldiff__n_double (haxint_ldiff__positive_ldiff (p) (q))
    | hax_core.base.spec.binary.positive.POSITIVE_XI (q) =>
      haxint_ldiff__n_double (haxint_ldiff__positive_ldiff (p) (q))
    end
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    match hax_core.base.spec.binary.positive.match_positive (rhs) with
    | hax_core.base.spec.binary.positive.POSITIVE_XH =>
      hax_core.base.spec.binary.pos.POS_POS (hax_core.base.spec.binary.positive.xO (p))
    | hax_core.base.spec.binary.positive.POSITIVE_XO (q) =>
      haxint_ldiff__n_succ_double (haxint_ldiff__positive_ldiff (p) (q))
    | hax_core.base.spec.binary.positive.POSITIVE_XI (q) =>
      haxint_ldiff__n_double (haxint_ldiff__positive_ldiff (p) (q))
    end
  end.

Definition z_add (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match lhs with
  | hax_core.base.spec.z.Z_NEG (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_NEG (q) =>
      hax_core.base.spec.z.Z_NEG (hax_core.base.binary.positive_add (p) (q))
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_NEG (p)
    | hax_core.base.spec.z.Z_POS (q) =>
      z_add__pos_z_sub (q) (p)
    end
  | hax_core.base.spec.z.Z_ZERO =>
    rhs
  | hax_core.base.spec.z.Z_POS (p) =>
    match rhs with
    | hax_core.base.spec.z.Z_NEG (q) =>
      z_add__pos_z_sub (p) (q)
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_POS (p)
    | hax_core.base.spec.z.Z_POS (q) =>
      hax_core.base.spec.z.Z_POS (hax_core.base.binary.positive_add (p) (q))
    end
  end.

Definition z_sub (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  z_add (lhs) (z_neg (rhs)).

Definition haxint_ldiff (lhs : hax_core.base.spec.binary.pos.t_POS) (rhs : hax_core.base.spec.binary.pos.t_POS) : hax_core.base.spec.binary.pos.t_POS :=
  match lhs with
  | hax_core.base.spec.binary.pos.POS_ZERO =>
    hax_core.base.spec.binary.pos.POS_ZERO
  | hax_core.base.spec.binary.pos.POS_POS (p) =>
    match rhs with
    | hax_core.base.spec.binary.pos.POS_ZERO =>
      hax_core.base.spec.binary.pos.POS_POS (p)
    | hax_core.base.spec.binary.pos.POS_POS (q) =>
      haxint_ldiff__positive_ldiff (p) (q)
    end
  end.

Definition z_bitor (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match lhs with
  | hax_core.base.spec.z.Z_ZERO =>
    rhs
  | hax_core.base.spec.z.Z_POS (x) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_POS (x)
    | hax_core.base.spec.z.Z_POS (y) =>
      hax_core.base.spec.z.Z_POS (hax_core.base.pos.bitor_binary (x) (y))
    | hax_core.base.spec.z.Z_NEG (y) =>
      hax_core.base.spec.z.Z_NEG (n_succ (haxint_ldiff (positive_pred_N (y)) (hax_core.base.spec.binary.pos.POS_POS (x))))
    end
  | hax_core.base.spec.z.Z_NEG (x) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_NEG (x)
    | hax_core.base.spec.z.Z_POS (y) =>
      hax_core.base.spec.z.Z_NEG (n_succ (haxint_ldiff (positive_pred_N (x)) (hax_core.base.spec.binary.pos.POS_POS (y))))
    | hax_core.base.spec.z.Z_NEG (y) =>
      hax_core.base.spec.z.Z_NEG (n_succ (z_bitor__n_and (positive_pred_N (x)) (positive_pred_N (y))))
    end
  end.

Definition z_bitand (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  match lhs with
  | hax_core.base.spec.z.Z_ZERO =>
    hax_core.base.spec.z.Z_ZERO
  | hax_core.base.spec.z.Z_POS (a) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (b) =>
      z_of_n (hax_core.base.spec.binary.pos.match_pos (hax_core.base.pos.bitand_binary (a) (b)))
    | hax_core.base.spec.z.Z_NEG (b) =>
      z_of_n (haxint_ldiff (hax_core.base.spec.binary.pos.POS_POS (a)) (positive_pred_N (b)))
    end
  | hax_core.base.spec.z.Z_NEG (a) =>
    match rhs with
    | hax_core.base.spec.z.Z_ZERO =>
      hax_core.base.spec.z.Z_ZERO
    | hax_core.base.spec.z.Z_POS (b) =>
      z_of_n (haxint_ldiff (hax_core.base.spec.binary.pos.POS_POS (b)) (positive_pred_N (a)))
    | hax_core.base.spec.z.Z_NEG (b) =>
      hax_core.base.spec.z.Z_NEG (n_succ (z_bitand__n_or (positive_pred_N (a)) (positive_pred_N (b))))
    end
  end.

Fixpoint pos_div_eucl (a : hax_core.base.spec.binary.positive.t_Positive) (b : hax_core.base.spec.z.t_Z) : (hax_core.base.spec.z.t_Z*hax_core.base.spec.z.t_Z) :=
  match hax_core.base.spec.binary.positive.match_positive (a) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    if
      z_le (hax_core.base.spec.z.v_Z_TWO) (core.clone.Clone__f_clone (b))
    then
      (hax_core.base.spec.z.Z_ZERO,hax_core.base.spec.z.v_Z_ONE)
    else
      (hax_core.base.spec.z.v_Z_ONE,hax_core.base.spec.z.Z_ZERO)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    let (q,r) := pos_div_eucl (p) (core.clone.Clone__f_clone (b)) in
    let r_ := z_mul (hax_core.base.spec.z.v_Z_TWO) (r) in
    if
      z_lt (core.clone.Clone__f_clone (r_)) (core.clone.Clone__f_clone (b))
    then
      (z_mul (hax_core.base.spec.z.v_Z_TWO) (q),r_)
    else
      (z_add (z_mul (hax_core.base.spec.z.v_Z_TWO) (q)) (hax_core.base.spec.z.v_Z_ONE),z_sub (r_) (b))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    let (q,r) := pos_div_eucl (p) (core.clone.Clone__f_clone (b)) in
    let r_ := z_add (z_mul (hax_core.base.spec.z.v_Z_TWO) (r)) (hax_core.base.spec.z.v_Z_ONE) in
    if
      z_lt (core.clone.Clone__f_clone (r_)) (core.clone.Clone__f_clone (b))
    then
      (z_mul (hax_core.base.spec.z.v_Z_TWO) (q),r_)
    else
      (z_add (z_mul (hax_core.base.spec.z.v_Z_TWO) (q)) (hax_core.base.spec.z.v_Z_ONE),z_sub (r_) (b))
  end.

Definition z_divmod (a : hax_core.base.spec.z.t_Z) (b : hax_core.base.spec.z.t_Z) : (hax_core.base.spec.z.t_Z*hax_core.base.spec.z.t_Z) :=
  match a with
  | hax_core.base.spec.z.Z_ZERO =>
    (hax_core.base.spec.z.Z_ZERO,hax_core.base.spec.z.Z_ZERO)
  | hax_core.base.spec.z.Z_POS (a_) =>
    match core.clone.Clone__f_clone (b) with
    | hax_core.base.spec.z.Z_ZERO =>
      (hax_core.base.spec.z.Z_ZERO,hax_core.base.spec.z.Z_POS (a_))
    | hax_core.base.spec.z.Z_POS (b_) =>
      pos_div_eucl (a_) (b)
    | hax_core.base.spec.z.Z_NEG (b_) =>
      let (q,r) := pos_div_eucl (a_) (hax_core.base.spec.z.Z_POS (b_)) in
      (z_neg (q),r)
    end
  | hax_core.base.spec.z.Z_NEG (a_) =>
    match core.clone.Clone__f_clone (b) with
    | hax_core.base.spec.z.Z_ZERO =>
      (hax_core.base.spec.z.Z_ZERO,hax_core.base.spec.z.Z_NEG (a_))
    | hax_core.base.spec.z.Z_POS (_) =>
      let (q,r) := pos_div_eucl (a_) (core.clone.Clone__f_clone (b)) in
      (z_neg (q),z_neg (r))
    | hax_core.base.spec.z.Z_NEG (b_) =>
      let (q,r) := pos_div_eucl (a_) (hax_core.base.spec.z.Z_POS (b_)) in
      (q,z_neg (r))
    end
  end.

Definition z_div (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  let (q,_) := z_divmod (lhs) (rhs) in
  q.

Definition z_rem (lhs : hax_core.base.spec.z.t_Z) (rhs : hax_core.base.spec.z.t_Z) : hax_core.base.spec.z.t_Z :=
  let (_,r) := z_divmod (lhs) (rhs) in
  r.
