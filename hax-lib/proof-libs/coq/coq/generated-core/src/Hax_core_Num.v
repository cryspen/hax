(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)







Notation "'impl__MIN'" := (hax_core.bundle.impl__MIN).

Notation "'impl__MAX'" := (hax_core.bundle.impl__MAX).

Notation "'impl__BITS'" := (hax_core.bundle.impl__BITS).

Notation "'impl__wrapping_add'" := (hax_core.bundle.impl__wrapping_add).

Notation "'impl__wrapping_sub'" := (hax_core.bundle.impl__wrapping_sub).

Notation "'impl__wrapping_neg'" := (hax_core.bundle.impl__wrapping_neg).

Notation "'impl__wrapping_abs'" := (hax_core.bundle.impl__wrapping_abs).

Notation "'impl__rem_euclid'" := (hax_core.bundle.impl__rem_euclid).

Notation "'impl__abs'" := (hax_core.bundle.impl__abs).

Notation "'impl__signum'" := (hax_core.bundle.impl__signum).

Notation "'impl__is_positive'" := (hax_core.bundle.impl__is_positive).

Notation "'impl__is_negative'" := (hax_core.bundle.impl__is_negative).

Notation "'impl_1__MIN'" := (hax_core.bundle.impl_1__MIN).

Notation "'impl_1__MAX'" := (hax_core.bundle.impl_1__MAX).

Notation "'impl_1__BITS'" := (hax_core.bundle.impl_1__BITS).

Notation "'impl_1__wrapping_add'" := (hax_core.bundle.impl_1__wrapping_add).

Notation "'impl_1__wrapping_sub'" := (hax_core.bundle.impl_1__wrapping_sub).

Notation "'impl_1__wrapping_neg'" := (hax_core.bundle.impl_1__wrapping_neg).

Notation "'impl_1__wrapping_abs'" := (hax_core.bundle.impl_1__wrapping_abs).

Notation "'impl_1__rem_euclid'" := (hax_core.bundle.impl_1__rem_euclid).

Notation "'impl_1__abs'" := (hax_core.bundle.impl_1__abs).

Notation "'impl_1__signum'" := (hax_core.bundle.impl_1__signum).

Notation "'impl_1__is_positive'" := (hax_core.bundle.impl_1__is_positive).

Notation "'impl_1__is_negative'" := (hax_core.bundle.impl_1__is_negative).

Notation "'impl_2__MIN'" := (hax_core.bundle.impl_2__MIN).

Notation "'impl_2__MAX'" := (hax_core.bundle.impl_2__MAX).

Notation "'impl_2__BITS'" := (hax_core.bundle.impl_2__BITS).

Notation "'impl_2__wrapping_add'" := (hax_core.bundle.impl_2__wrapping_add).

Notation "'impl_2__wrapping_sub'" := (hax_core.bundle.impl_2__wrapping_sub).

Notation "'impl_2__wrapping_neg'" := (hax_core.bundle.impl_2__wrapping_neg).

Notation "'impl_2__wrapping_abs'" := (hax_core.bundle.impl_2__wrapping_abs).

Notation "'impl_2__rem_euclid'" := (hax_core.bundle.impl_2__rem_euclid).

Notation "'impl_2__abs'" := (hax_core.bundle.impl_2__abs).

Notation "'impl_2__signum'" := (hax_core.bundle.impl_2__signum).

Notation "'impl_2__is_positive'" := (hax_core.bundle.impl_2__is_positive).

Notation "'impl_2__is_negative'" := (hax_core.bundle.impl_2__is_negative).

Notation "'impl_3__MIN'" := (hax_core.bundle.impl_3__MIN).

Notation "'impl_3__MAX'" := (hax_core.bundle.impl_3__MAX).

Notation "'impl_3__BITS'" := (hax_core.bundle.impl_3__BITS).

Notation "'impl_3__wrapping_add'" := (hax_core.bundle.impl_3__wrapping_add).

Notation "'impl_3__wrapping_sub'" := (hax_core.bundle.impl_3__wrapping_sub).

Notation "'impl_3__wrapping_neg'" := (hax_core.bundle.impl_3__wrapping_neg).

Notation "'impl_3__wrapping_abs'" := (hax_core.bundle.impl_3__wrapping_abs).

Notation "'impl_3__rem_euclid'" := (hax_core.bundle.impl_3__rem_euclid).

Notation "'impl_3__abs'" := (hax_core.bundle.impl_3__abs).

Notation "'impl_3__signum'" := (hax_core.bundle.impl_3__signum).

Notation "'impl_3__is_positive'" := (hax_core.bundle.impl_3__is_positive).

Notation "'impl_3__is_negative'" := (hax_core.bundle.impl_3__is_negative).

Notation "'impl_4__MIN'" := (hax_core.bundle.impl_4__MIN).

Notation "'impl_4__MAX'" := (hax_core.bundle.impl_4__MAX).

Notation "'impl_4__BITS'" := (hax_core.bundle.impl_4__BITS).

Notation "'impl_4__wrapping_add'" := (hax_core.bundle.impl_4__wrapping_add).

Notation "'impl_4__wrapping_sub'" := (hax_core.bundle.impl_4__wrapping_sub).

Notation "'impl_4__wrapping_neg'" := (hax_core.bundle.impl_4__wrapping_neg).

Notation "'impl_4__wrapping_abs'" := (hax_core.bundle.impl_4__wrapping_abs).

Notation "'impl_4__rem_euclid'" := (hax_core.bundle.impl_4__rem_euclid).

Notation "'impl_4__abs'" := (hax_core.bundle.impl_4__abs).

Notation "'impl_4__signum'" := (hax_core.bundle.impl_4__signum).

Notation "'impl_4__is_positive'" := (hax_core.bundle.impl_4__is_positive).

Notation "'impl_4__is_negative'" := (hax_core.bundle.impl_4__is_negative).

Notation "'impl_5__MIN'" := (hax_core.bundle.impl_5__MIN).

Notation "'impl_5__MAX'" := (hax_core.bundle.impl_5__MAX).

Notation "'impl_5__BITS'" := (hax_core.bundle.impl_5__BITS).

Notation "'impl_5__wrapping_add'" := (hax_core.bundle.impl_5__wrapping_add).

Notation "'impl_5__wrapping_sub'" := (hax_core.bundle.impl_5__wrapping_sub).

Notation "'impl_5__wrapping_neg'" := (hax_core.bundle.impl_5__wrapping_neg).

Notation "'impl_5__wrapping_abs'" := (hax_core.bundle.impl_5__wrapping_abs).

Notation "'impl_5__rem_euclid'" := (hax_core.bundle.impl_5__rem_euclid).

Notation "'impl_5__abs'" := (hax_core.bundle.impl_5__abs).

Notation "'impl_5__signum'" := (hax_core.bundle.impl_5__signum).

Notation "'impl_5__is_positive'" := (hax_core.bundle.impl_5__is_positive).

Notation "'impl_5__is_negative'" := (hax_core.bundle.impl_5__is_negative).

Notation "'impl_6__MIN'" := (hax_core.bundle.impl_6__MIN).

Notation "'impl_6__MAX'" := (hax_core.bundle.impl_6__MAX).

Notation "'impl_6__BITS'" := (hax_core.bundle.impl_6__BITS).

Notation "'impl_6__count_ones'" := (hax_core.bundle.impl_6__count_ones).

Notation "'impl_6__count_zeros'" := (hax_core.bundle.impl_6__count_zeros).

Notation "'impl_6__leading_zeros'" := (hax_core.bundle.impl_6__leading_zeros).

Notation "'impl_6__trailing_zeros'" := (hax_core.bundle.impl_6__trailing_zeros).

Notation "'impl_6__leading_ones'" := (hax_core.bundle.impl_6__leading_ones).

Notation "'impl_6__trailing_ones'" := (hax_core.bundle.impl_6__trailing_ones).

Notation "'impl_6__rotate_left'" := (hax_core.bundle.impl_6__rotate_left).

Notation "'impl_6__rotate_right'" := (hax_core.bundle.impl_6__rotate_right).

Notation "'impl_6__swap_bytes'" := (hax_core.bundle.impl_6__swap_bytes).

Notation "'impl_6__from_be'" := (hax_core.bundle.impl_6__from_be).

Notation "'impl_6__from_le'" := (hax_core.bundle.impl_6__from_le).

Notation "'impl_6__to_be'" := (hax_core.bundle.impl_6__to_be).

Notation "'impl_6__to_le'" := (hax_core.bundle.impl_6__to_le).

Notation "'impl_6__checked_add'" := (hax_core.bundle.impl_6__checked_add).

Notation "'impl_6__checked_div'" := (hax_core.bundle.impl_6__checked_div).

Notation "'impl_6__wrapping_add'" := (hax_core.bundle.impl_6__wrapping_add).

Notation "'impl_6__wrapping_sub'" := (hax_core.bundle.impl_6__wrapping_sub).

Notation "'impl_6__wrapping_mul'" := (hax_core.bundle.impl_6__wrapping_mul).

Notation "'impl_6__wrapping_div'" := (hax_core.bundle.impl_6__wrapping_div).

Notation "'impl_6__wrapping_div_euclid'" := (hax_core.bundle.impl_6__wrapping_div_euclid).

Notation "'impl_6__wrapping_rem'" := (hax_core.bundle.impl_6__wrapping_rem).

Notation "'impl_6__wrapping_rem_euclid'" := (hax_core.bundle.impl_6__wrapping_rem_euclid).

Notation "'impl_6__wrapping_neg'" := (hax_core.bundle.impl_6__wrapping_neg).

Notation "'impl_6__overflowing_add'" := (hax_core.bundle.impl_6__overflowing_add).

Notation "'impl_7__MIN'" := (hax_core.bundle.impl_7__MIN).

Notation "'impl_7__MAX'" := (hax_core.bundle.impl_7__MAX).

Notation "'impl_7__BITS'" := (hax_core.bundle.impl_7__BITS).

Notation "'impl_7__count_ones'" := (hax_core.bundle.impl_7__count_ones).

Notation "'impl_7__count_zeros'" := (hax_core.bundle.impl_7__count_zeros).

Notation "'impl_7__leading_zeros'" := (hax_core.bundle.impl_7__leading_zeros).

Notation "'impl_7__trailing_zeros'" := (hax_core.bundle.impl_7__trailing_zeros).

Notation "'impl_7__leading_ones'" := (hax_core.bundle.impl_7__leading_ones).

Notation "'impl_7__trailing_ones'" := (hax_core.bundle.impl_7__trailing_ones).

Notation "'impl_7__rotate_left'" := (hax_core.bundle.impl_7__rotate_left).

Notation "'impl_7__rotate_right'" := (hax_core.bundle.impl_7__rotate_right).

Notation "'impl_7__swap_bytes'" := (hax_core.bundle.impl_7__swap_bytes).

Notation "'impl_7__from_be'" := (hax_core.bundle.impl_7__from_be).

Notation "'impl_7__from_le'" := (hax_core.bundle.impl_7__from_le).

Notation "'impl_7__to_be'" := (hax_core.bundle.impl_7__to_be).

Notation "'impl_7__to_le'" := (hax_core.bundle.impl_7__to_le).

Notation "'impl_7__checked_add'" := (hax_core.bundle.impl_7__checked_add).

Notation "'impl_7__checked_div'" := (hax_core.bundle.impl_7__checked_div).

Notation "'impl_7__wrapping_add'" := (hax_core.bundle.impl_7__wrapping_add).

Notation "'impl_7__wrapping_sub'" := (hax_core.bundle.impl_7__wrapping_sub).

Notation "'impl_7__wrapping_mul'" := (hax_core.bundle.impl_7__wrapping_mul).

Notation "'impl_7__wrapping_div'" := (hax_core.bundle.impl_7__wrapping_div).

Notation "'impl_7__wrapping_div_euclid'" := (hax_core.bundle.impl_7__wrapping_div_euclid).

Notation "'impl_7__wrapping_rem'" := (hax_core.bundle.impl_7__wrapping_rem).

Notation "'impl_7__wrapping_rem_euclid'" := (hax_core.bundle.impl_7__wrapping_rem_euclid).

Notation "'impl_7__wrapping_neg'" := (hax_core.bundle.impl_7__wrapping_neg).

Notation "'impl_7__overflowing_add'" := (hax_core.bundle.impl_7__overflowing_add).

Notation "'impl_8__MIN'" := (hax_core.bundle.impl_8__MIN).

Notation "'impl_8__MAX'" := (hax_core.bundle.impl_8__MAX).

Notation "'impl_8__BITS'" := (hax_core.bundle.impl_8__BITS).

Notation "'impl_8__count_ones'" := (hax_core.bundle.impl_8__count_ones).

Notation "'impl_8__count_zeros'" := (hax_core.bundle.impl_8__count_zeros).

Notation "'impl_8__leading_zeros'" := (hax_core.bundle.impl_8__leading_zeros).

Notation "'impl_8__trailing_zeros'" := (hax_core.bundle.impl_8__trailing_zeros).

Notation "'impl_8__leading_ones'" := (hax_core.bundle.impl_8__leading_ones).

Notation "'impl_8__trailing_ones'" := (hax_core.bundle.impl_8__trailing_ones).

Notation "'impl_8__rotate_left'" := (hax_core.bundle.impl_8__rotate_left).

Notation "'impl_8__rotate_right'" := (hax_core.bundle.impl_8__rotate_right).

Notation "'impl_8__swap_bytes'" := (hax_core.bundle.impl_8__swap_bytes).

Notation "'impl_8__from_be'" := (hax_core.bundle.impl_8__from_be).

Notation "'impl_8__from_le'" := (hax_core.bundle.impl_8__from_le).

Notation "'impl_8__to_be'" := (hax_core.bundle.impl_8__to_be).

Notation "'impl_8__to_le'" := (hax_core.bundle.impl_8__to_le).

Notation "'impl_8__checked_add'" := (hax_core.bundle.impl_8__checked_add).

Notation "'impl_8__checked_div'" := (hax_core.bundle.impl_8__checked_div).

Notation "'impl_8__wrapping_add'" := (hax_core.bundle.impl_8__wrapping_add).

Notation "'impl_8__wrapping_sub'" := (hax_core.bundle.impl_8__wrapping_sub).

Notation "'impl_8__wrapping_mul'" := (hax_core.bundle.impl_8__wrapping_mul).

Notation "'impl_8__wrapping_div'" := (hax_core.bundle.impl_8__wrapping_div).

Notation "'impl_8__wrapping_div_euclid'" := (hax_core.bundle.impl_8__wrapping_div_euclid).

Notation "'impl_8__wrapping_rem'" := (hax_core.bundle.impl_8__wrapping_rem).

Notation "'impl_8__wrapping_rem_euclid'" := (hax_core.bundle.impl_8__wrapping_rem_euclid).

Notation "'impl_8__wrapping_neg'" := (hax_core.bundle.impl_8__wrapping_neg).

Notation "'impl_8__overflowing_add'" := (hax_core.bundle.impl_8__overflowing_add).

Notation "'impl_9__MIN'" := (hax_core.bundle.impl_9__MIN).

Notation "'impl_9__MAX'" := (hax_core.bundle.impl_9__MAX).

Notation "'impl_9__BITS'" := (hax_core.bundle.impl_9__BITS).

Notation "'impl_9__count_ones'" := (hax_core.bundle.impl_9__count_ones).

Notation "'impl_9__count_zeros'" := (hax_core.bundle.impl_9__count_zeros).

Notation "'impl_9__leading_zeros'" := (hax_core.bundle.impl_9__leading_zeros).

Notation "'impl_9__trailing_zeros'" := (hax_core.bundle.impl_9__trailing_zeros).

Notation "'impl_9__leading_ones'" := (hax_core.bundle.impl_9__leading_ones).

Notation "'impl_9__trailing_ones'" := (hax_core.bundle.impl_9__trailing_ones).

Notation "'impl_9__rotate_left'" := (hax_core.bundle.impl_9__rotate_left).

Notation "'impl_9__rotate_right'" := (hax_core.bundle.impl_9__rotate_right).

Notation "'impl_9__swap_bytes'" := (hax_core.bundle.impl_9__swap_bytes).

Notation "'impl_9__from_be'" := (hax_core.bundle.impl_9__from_be).

Notation "'impl_9__from_le'" := (hax_core.bundle.impl_9__from_le).

Notation "'impl_9__to_be'" := (hax_core.bundle.impl_9__to_be).

Notation "'impl_9__to_le'" := (hax_core.bundle.impl_9__to_le).

Notation "'impl_9__checked_add'" := (hax_core.bundle.impl_9__checked_add).

Notation "'impl_9__checked_div'" := (hax_core.bundle.impl_9__checked_div).

Notation "'impl_9__wrapping_add'" := (hax_core.bundle.impl_9__wrapping_add).

Notation "'impl_9__wrapping_sub'" := (hax_core.bundle.impl_9__wrapping_sub).

Notation "'impl_9__wrapping_mul'" := (hax_core.bundle.impl_9__wrapping_mul).

Notation "'impl_9__wrapping_div'" := (hax_core.bundle.impl_9__wrapping_div).

Notation "'impl_9__wrapping_div_euclid'" := (hax_core.bundle.impl_9__wrapping_div_euclid).

Notation "'impl_9__wrapping_rem'" := (hax_core.bundle.impl_9__wrapping_rem).

Notation "'impl_9__wrapping_rem_euclid'" := (hax_core.bundle.impl_9__wrapping_rem_euclid).

Notation "'impl_9__wrapping_neg'" := (hax_core.bundle.impl_9__wrapping_neg).

Notation "'impl_9__overflowing_add'" := (hax_core.bundle.impl_9__overflowing_add).

Notation "'impl_10__MIN'" := (hax_core.bundle.impl_10__MIN).

Notation "'impl_10__MAX'" := (hax_core.bundle.impl_10__MAX).

Notation "'impl_10__BITS'" := (hax_core.bundle.impl_10__BITS).

Notation "'impl_10__count_ones'" := (hax_core.bundle.impl_10__count_ones).

Notation "'impl_10__count_zeros'" := (hax_core.bundle.impl_10__count_zeros).

Notation "'impl_10__leading_zeros'" := (hax_core.bundle.impl_10__leading_zeros).

Notation "'impl_10__trailing_zeros'" := (hax_core.bundle.impl_10__trailing_zeros).

Notation "'impl_10__leading_ones'" := (hax_core.bundle.impl_10__leading_ones).

Notation "'impl_10__trailing_ones'" := (hax_core.bundle.impl_10__trailing_ones).

Notation "'impl_10__rotate_left'" := (hax_core.bundle.impl_10__rotate_left).

Notation "'impl_10__rotate_right'" := (hax_core.bundle.impl_10__rotate_right).

Notation "'impl_10__swap_bytes'" := (hax_core.bundle.impl_10__swap_bytes).

Notation "'impl_10__from_be'" := (hax_core.bundle.impl_10__from_be).

Notation "'impl_10__from_le'" := (hax_core.bundle.impl_10__from_le).

Notation "'impl_10__to_be'" := (hax_core.bundle.impl_10__to_be).

Notation "'impl_10__to_le'" := (hax_core.bundle.impl_10__to_le).

Notation "'impl_10__checked_add'" := (hax_core.bundle.impl_10__checked_add).

Notation "'impl_10__checked_div'" := (hax_core.bundle.impl_10__checked_div).

Notation "'impl_10__wrapping_add'" := (hax_core.bundle.impl_10__wrapping_add).

Notation "'impl_10__wrapping_sub'" := (hax_core.bundle.impl_10__wrapping_sub).

Notation "'impl_10__wrapping_mul'" := (hax_core.bundle.impl_10__wrapping_mul).

Notation "'impl_10__wrapping_div'" := (hax_core.bundle.impl_10__wrapping_div).

Notation "'impl_10__wrapping_div_euclid'" := (hax_core.bundle.impl_10__wrapping_div_euclid).

Notation "'impl_10__wrapping_rem'" := (hax_core.bundle.impl_10__wrapping_rem).

Notation "'impl_10__wrapping_rem_euclid'" := (hax_core.bundle.impl_10__wrapping_rem_euclid).

Notation "'impl_10__wrapping_neg'" := (hax_core.bundle.impl_10__wrapping_neg).

Notation "'impl_10__overflowing_add'" := (hax_core.bundle.impl_10__overflowing_add).

Notation "'impl_11__MIN'" := (hax_core.bundle.impl_11__MIN).

Notation "'impl_11__MAX'" := (hax_core.bundle.impl_11__MAX).

Notation "'impl_11__BITS'" := (hax_core.bundle.impl_11__BITS).

Notation "'impl_11__count_ones'" := (hax_core.bundle.impl_11__count_ones).

Notation "'impl_11__count_zeros'" := (hax_core.bundle.impl_11__count_zeros).

Notation "'impl_11__leading_zeros'" := (hax_core.bundle.impl_11__leading_zeros).

Notation "'impl_11__trailing_zeros'" := (hax_core.bundle.impl_11__trailing_zeros).

Notation "'impl_11__leading_ones'" := (hax_core.bundle.impl_11__leading_ones).

Notation "'impl_11__trailing_ones'" := (hax_core.bundle.impl_11__trailing_ones).

Notation "'impl_11__rotate_left'" := (hax_core.bundle.impl_11__rotate_left).

Notation "'impl_11__rotate_right'" := (hax_core.bundle.impl_11__rotate_right).

Notation "'impl_11__swap_bytes'" := (hax_core.bundle.impl_11__swap_bytes).

Notation "'impl_11__from_be'" := (hax_core.bundle.impl_11__from_be).

Notation "'impl_11__from_le'" := (hax_core.bundle.impl_11__from_le).

Notation "'impl_11__to_be'" := (hax_core.bundle.impl_11__to_be).

Notation "'impl_11__to_le'" := (hax_core.bundle.impl_11__to_le).

Notation "'impl_11__checked_add'" := (hax_core.bundle.impl_11__checked_add).

Notation "'impl_11__checked_div'" := (hax_core.bundle.impl_11__checked_div).

Notation "'impl_11__wrapping_add'" := (hax_core.bundle.impl_11__wrapping_add).

Notation "'impl_11__wrapping_sub'" := (hax_core.bundle.impl_11__wrapping_sub).

Notation "'impl_11__wrapping_mul'" := (hax_core.bundle.impl_11__wrapping_mul).

Notation "'impl_11__wrapping_div'" := (hax_core.bundle.impl_11__wrapping_div).

Notation "'impl_11__wrapping_div_euclid'" := (hax_core.bundle.impl_11__wrapping_div_euclid).

Notation "'impl_11__wrapping_rem'" := (hax_core.bundle.impl_11__wrapping_rem).

Notation "'impl_11__wrapping_rem_euclid'" := (hax_core.bundle.impl_11__wrapping_rem_euclid).

Notation "'impl_11__wrapping_neg'" := (hax_core.bundle.impl_11__wrapping_neg).

Notation "'impl_11__overflowing_add'" := (hax_core.bundle.impl_11__overflowing_add).
