(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)











(* NotImplementedYet *)

Fixpoint impl_24__from_u8_binary (x : t_u8) `{core.cmp.PartialEq__f_ne (x) ((0 : t_u8)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_u8))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_u8))) ((0 : t_u8))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_u8_binary (core.ops.arith.Div__f_div (x) ((2 : t_u8))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_u8_binary (core.ops.arith.Div__f_div (x) ((2 : t_u8)))).

Fixpoint impl_24__to_u8_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_u8 :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_u8)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_u8_binary (p)) ((2 : t_u8))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_u8_binary (p)) ((2 : t_u8))) ((1 : t_u8))
  end.

Fixpoint impl_24__from_u16_binary (x : t_u16) `{core.cmp.PartialEq__f_ne (x) ((0 : t_u16)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_u16))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_u16))) ((0 : t_u16))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_u16_binary (core.ops.arith.Div__f_div (x) ((2 : t_u16))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_u16_binary (core.ops.arith.Div__f_div (x) ((2 : t_u16)))).

Fixpoint impl_24__to_u16_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_u16 :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_u16)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_u16_binary (p)) ((2 : t_u16))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_u16_binary (p)) ((2 : t_u16))) ((1 : t_u16))
  end.

Fixpoint impl_24__from_u32_binary (x : t_u32) `{core.cmp.PartialEq__f_ne (x) ((0 : t_u32)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_u32))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_u32))) ((0 : t_u32))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_u32_binary (core.ops.arith.Div__f_div (x) ((2 : t_u32))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_u32_binary (core.ops.arith.Div__f_div (x) ((2 : t_u32)))).

Fixpoint impl_24__to_u32_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_u32 :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_u32)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_u32_binary (p)) ((2 : t_u32))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_u32_binary (p)) ((2 : t_u32))) ((1 : t_u32))
  end.

Fixpoint impl_24__from_u64_binary (x : t_u64) `{core.cmp.PartialEq__f_ne (x) ((0 : t_u64)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_u64))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_u64))) ((0 : t_u64))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_u64_binary (core.ops.arith.Div__f_div (x) ((2 : t_u64))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_u64_binary (core.ops.arith.Div__f_div (x) ((2 : t_u64)))).

Fixpoint impl_24__to_u64_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_u64 :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_u64)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_u64_binary (p)) ((2 : t_u64))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_u64_binary (p)) ((2 : t_u64))) ((1 : t_u64))
  end.

Fixpoint impl_24__from_u128_binary (x : t_u128) `{core.cmp.PartialEq__f_ne (x) ((0 : t_u128)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_u128))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_u128))) ((0 : t_u128))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_u128_binary (core.ops.arith.Div__f_div (x) ((2 : t_u128))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_u128_binary (core.ops.arith.Div__f_div (x) ((2 : t_u128)))).

Fixpoint impl_24__to_u128_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_u128 :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_u128)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_u128_binary (p)) ((2 : t_u128))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_u128_binary (p)) ((2 : t_u128))) ((1 : t_u128))
  end.

Fixpoint impl_24__from_usize_binary (x : t_usize) `{core.cmp.PartialEq__f_ne (x) ((0 : t_usize)) = true} : hax_core.base.spec.binary.positive.t_Positive :=
  if
    core.cmp.PartialEq__f_eq (x) ((1 : t_usize))
  then
    hax_core.base.spec.binary.positive.xH
  else
    if
      core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) ((2 : t_usize))) ((0 : t_usize))
    then
      hax_core.base.spec.binary.positive.xO (impl_24__from_usize_binary (core.ops.arith.Div__f_div (x) ((2 : t_usize))))
    else
      hax_core.base.spec.binary.positive.xI (impl_24__from_usize_binary (core.ops.arith.Div__f_div (x) ((2 : t_usize)))).

Fixpoint impl_24__to_usize_binary (self : hax_core.base.spec.binary.positive.t_Positive) : t_usize :=
  match hax_core.base.spec.binary.positive.match_positive (self) with
  | hax_core.base.spec.binary.positive.POSITIVE_XH =>
    (1 : t_usize)
  | hax_core.base.spec.binary.positive.POSITIVE_XO (p) =>
    core.ops.arith.Mul__f_mul (impl_24__to_usize_binary (p)) ((2 : t_usize))
  | hax_core.base.spec.binary.positive.POSITIVE_XI (p) =>
    core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (impl_24__to_usize_binary (p)) ((2 : t_usize))) ((1 : t_usize))
  end.

Instance core.convert.t_From_855627564 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_u8)) :=
  {
    implaabbcc_t_From_impl__f_from := fun  (x : t_u8)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_u8))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_u8_binary (x));
  }.

Instance core.convert.t_From_144367647 : core.convert.t_From ((t_u8)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_1__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_u8)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_u8_binary (p)
      end;
  }.

Instance core.convert.t_From_782142165 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_u16)) :=
  {
    implaabbcc_t_From_impl_2__f_from := fun  (x : t_u16)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_u16))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_u16_binary (x));
  }.

Instance core.convert.t_From_520711060 : core.convert.t_From ((t_u16)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_3__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_u16)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_u16_binary (p)
      end;
  }.

Instance core.convert.t_From_240330515 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_u32)) :=
  {
    implaabbcc_t_From_impl_4__f_from := fun  (x : t_u32)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_u32))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_u32_binary (x));
  }.

Instance core.convert.t_From_882622944 : core.convert.t_From ((t_u32)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_5__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_u32)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_u32_binary (p)
      end;
  }.

Instance core.convert.t_From_152295544 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_u64)) :=
  {
    implaabbcc_t_From_impl_6__f_from := fun  (x : t_u64)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_u64))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_u64_binary (x));
  }.

Instance core.convert.t_From_181201200 : core.convert.t_From ((t_u64)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_7__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_u64)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_u64_binary (p)
      end;
  }.

Instance core.convert.t_From_243296114 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_u128)) :=
  {
    implaabbcc_t_From_impl_8__f_from := fun  (x : t_u128)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_u128))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_u128_binary (x));
  }.

Instance core.convert.t_From_1065082934 : core.convert.t_From ((t_u128)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_9__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_u128)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_u128_binary (p)
      end;
  }.

Instance core.convert.t_From_775793321 : core.convert.t_From ((hax_core.base.spec.haxint.t_HaxInt)) ((t_usize)) :=
  {
    implaabbcc_t_From_impl_10__f_from := fun  (x : t_usize)=>
      if
        core.cmp.PartialEq__f_eq (x) ((0 : t_usize))
      then
        hax_core.base.spec.haxint.v_HaxInt_ZERO
      else
        hax_core.base.spec.binary.positive.positive_to_int (impl_24__from_usize_binary (x));
  }.

Instance core.convert.t_From_451926598 : core.convert.t_From ((t_usize)) ((hax_core.base.spec.haxint.t_HaxInt)) :=
  {
    implaabbcc_t_From_impl_11__f_from := fun  (x : hax_core.base.spec.haxint.t_HaxInt)=>
      match hax_core.base.spec.binary.pos.match_pos (x) with
      | hax_core.base.spec.binary.pos.POS_ZERO =>
        (0 : t_usize)
      | hax_core.base.spec.binary.pos.POS_POS (p) =>
        impl_24__to_usize_binary (p)
      end;
  }.

Instance core.convert.t_From_21170510 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_i8)) :=
  {
    implaabbcc_t_From_impl_12__f_from := fun  (x : t_i8)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_i8)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_u8_binary (core.num.impl_i8__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_u8_binary (core.num.impl_i8__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_604880747 : core.convert.t_From ((t_i8)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_13__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_u8_binary (x)) ((1 : t_u8))))) ((1 : t_i8))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_i8)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_u8_binary (x))
      end;
  }.

Instance core.convert.t_From_851320244 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_i16)) :=
  {
    implaabbcc_t_From_impl_14__f_from := fun  (x : t_i16)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_i16)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_u16_binary (core.num.impl_i16__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_u16_binary (core.num.impl_i16__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_32171996 : core.convert.t_From ((t_i16)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_15__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_u16_binary (x)) ((1 : t_u16))))) ((1 : t_i16))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_i16)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_u16_binary (x))
      end;
  }.

Instance core.convert.t_From_754922541 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_i32)) :=
  {
    implaabbcc_t_From_impl_16__f_from := fun  (x : t_i32)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_i32)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_u32_binary (core.num.impl_i32__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_u32_binary (core.num.impl_i32__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_280836360 : core.convert.t_From ((t_i32)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_17__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_u32_binary (x)) ((1 : t_u32))))) ((1 : t_i32))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_i32)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_u32_binary (x))
      end;
  }.

Instance core.convert.t_From_514445078 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_i64)) :=
  {
    implaabbcc_t_From_impl_18__f_from := fun  (x : t_i64)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_i64)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_u64_binary (core.num.impl_i64__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_u64_binary (core.num.impl_i64__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_162260144 : core.convert.t_From ((t_i64)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_19__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_u64_binary (x)) ((1 : t_u64))))) ((1 : t_i64))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_i64)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_u64_binary (x))
      end;
  }.

Instance core.convert.t_From_169497314 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_i128)) :=
  {
    implaabbcc_t_From_impl_20__f_from := fun  (x : t_i128)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_i128)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_u128_binary (core.num.impl_i128__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_u128_binary (core.num.impl_i128__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_845997437 : core.convert.t_From ((t_i128)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_21__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_u128_binary (x)) ((1 : t_u128))))) ((1 : t_i128))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_i128)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_u128_binary (x))
      end;
  }.

Instance core.convert.t_From_586195817 : core.convert.t_From ((hax_core.base.spec.z.t_Z)) ((t_isize)) :=
  {
    implaabbcc_t_From_impl_22__f_from := fun  (x : t_isize)=>
      match core.cmp.Ord__f_cmp (x) ((0 : t_isize)) with
      | core.cmp.Ordering_Equal =>
        hax_core.base.spec.z.Z_ZERO
      | core.cmp.Ordering_Less =>
        hax_core.base.spec.z.Z_NEG (impl_24__from_usize_binary (core.num.impl_isize__unsigned_abs (x)))
      | core.cmp.Ordering_Greater =>
        hax_core.base.spec.z.Z_POS (impl_24__from_usize_binary (core.num.impl_isize__unsigned_abs (x)))
      end;
  }.

Instance core.convert.t_From_869500160 : core.convert.t_From ((t_isize)) ((hax_core.base.spec.z.t_Z)) :=
  {
    implaabbcc_t_From_impl_23__f_from := fun  (x : hax_core.base.spec.z.t_Z)=>
      match x with
      | hax_core.base.spec.z.Z_NEG (x) =>
        core.ops.arith.Sub__f_sub (core.ops.arith.Neg__f_neg (cast (core.ops.arith.Sub__f_sub (impl_24__to_usize_binary (x)) ((1 : t_usize))))) ((1 : t_isize))
      | hax_core.base.spec.z.Z_ZERO =>
        (0 : t_isize)
      | hax_core.base.spec.z.Z_POS (x) =>
        cast (impl_24__to_usize_binary (x))
      end;
  }.
