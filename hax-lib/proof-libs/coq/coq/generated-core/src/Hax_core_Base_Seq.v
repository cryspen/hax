(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)













Definition is_empty `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) : bool :=
  match hax_core.base.spec.seq.match_list (s) with
  | hax_core.base.spec.seq.LIST_NIL =>
    (true : bool)
  | hax_core.base.spec.seq.LIST_CONS (_) (_) =>
    (false : bool)
  end.

Definition hd__panic_cold_explicit '(_ : unit) : rust_primitives.hax.t_Never :=
  core.panicking.panic_explicit (tt).

Definition hd `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) `{core.ops.bit.Not__f_not (is_empty (s)) = true} : v_T :=
  match hax_core.base.spec.seq.match_list (s) with
  | hax_core.base.spec.seq.LIST_NIL =>
    rust_primitives.hax.never_to_any (hd__panic_cold_explicit (tt))
  | hax_core.base.spec.seq.LIST_CONS (hd) (_) =>
    hd
  end.

Definition tl `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) `{core.ops.bit.Not__f_not (is_empty (s)) = true} : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  match hax_core.base.spec.seq.match_list (s) with
  | hax_core.base.spec.seq.LIST_NIL =>
    hax_core.base.spec.seq.nil (tt)
  | hax_core.base.spec.seq.LIST_CONS (_) (tl) =>
    tl
  end.

Definition set_index__set_index_unary__panic_cold_explicit '(_ : unit) : rust_primitives.hax.t_Never :=
  core.panicking.panic_explicit (tt).

Fixpoint len__len_unary `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) : hax_core.base.spec.unary.t_Unary :=
  match hax_core.base.spec.seq.match_list (s) with
  | hax_core.base.spec.seq.LIST_NIL =>
    hax_core.base.spec.unary.unary_from_int (hax_core.base.spec.haxint.v_HaxInt_ZERO)
  | hax_core.base.spec.seq.LIST_CONS (_) (tl) =>
    hax_core.base.spec.unary.succ (len__len_unary (tl))
  end.

Fixpoint repeat__repeat_unary `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (n : hax_core.base.spec.unary.t_Unary) (v : v_T) : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  match hax_core.base.spec.unary.match_unary (n) with
  | hax_core.base.spec.unary.UNARY_ZERO =>
    hax_core.base.spec.seq.nil (tt)
  | hax_core.base.spec.unary.UNARY_SUCC (m) =>
    hax_core.base.spec.seq.cons (repeat__repeat_unary (m) (core.clone.Clone__f_clone (v))) (v)
  end.

Fixpoint set_index__set_index_unary `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (x : hax_core.base.spec.seq.t_Seq ((v_T))) (i : hax_core.base.spec.unary.t_Unary) (v : v_T) : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  match hax_core.base.spec.seq.match_list (x) with
  | hax_core.base.spec.seq.LIST_NIL =>
    rust_primitives.hax.never_to_any (set_index__set_index_unary__panic_cold_explicit (tt))
  | hax_core.base.spec.seq.LIST_CONS (hd) (tl) =>
    match hax_core.base.spec.unary.match_unary (i) with
    | hax_core.base.spec.unary.UNARY_ZERO =>
      hax_core.base.spec.seq.cons (tl) (v)
    | hax_core.base.spec.unary.UNARY_SUCC (n) =>
      hax_core.base.spec.seq.cons (set_index__set_index_unary (tl) (n) (v)) (hd)
    end
  end.

Fixpoint rev__rev_accum `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) (accum : hax_core.base.spec.seq.t_Seq ((v_T))) : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  match hax_core.base.spec.seq.match_list (s) with
  | hax_core.base.spec.seq.LIST_NIL =>
    accum
  | hax_core.base.spec.seq.LIST_CONS (hd) (tl) =>
    rev__rev_accum (tl) (hax_core.base.spec.seq.cons (accum) (hd))
  end.

Fixpoint eq_inner `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} `{core.cmp.t_PartialEq (v_T) (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) (other : hax_core.base.spec.seq.t_Seq ((v_T))) : bool :=
  match hax_core.base.spec.seq.match_list (core.clone.Clone__f_clone (s)) with
  | hax_core.base.spec.seq.LIST_NIL =>
    is_empty (core.clone.Clone__f_clone (other))
  | hax_core.base.spec.seq.LIST_CONS (x) (xs) =>
    match hax_core.base.spec.seq.match_list (core.clone.Clone__f_clone (other)) with
    | hax_core.base.spec.seq.LIST_NIL =>
      (false : bool)
    | hax_core.base.spec.seq.LIST_CONS (y) (ys) =>
      andb (core.cmp.PartialEq__f_eq (x) (y)) (eq_inner (xs) (ys))
    end
  end.

Definition len `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) : hax_core.base.spec.haxint.t_HaxInt :=
  hax_core.base.spec.unary.unary_to_int (len__len_unary (s)).

Definition repeat `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (n : hax_core.base.spec.haxint.t_HaxInt) (v : v_T) : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  repeat__repeat_unary (hax_core.base.spec.unary.unary_from_int (n)) (v).

Definition set_index `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) (i : hax_core.base.spec.haxint.t_HaxInt) (v : v_T) `{hax_core.base.pos.haxint_lt (i) (len (s)) = true} : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  set_index__set_index_unary (s) (hax_core.base.spec.unary.unary_from_int (i)) (v).

Definition rev `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) : hax_core.base.spec.seq.t_Seq ((v_T)) :=
  rev__rev_accum (s) (hax_core.base.spec.seq.nil (tt)).

Instance core.cmp.t_PartialEq_59946954 `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} `{core.cmp.t_PartialEq (v_T) (v_T)} : core.cmp.t_PartialEq ((hax_core.base.spec.seq.t_Seq ((v_T)))) ((hax_core.base.spec.seq.t_Seq ((v_T)))) :=
  {
    implaabbcc_t_PartialEq_impl__f_eq := fun  (self : hax_core.base.spec.seq.t_Seq ((v_T))) (other : hax_core.base.spec.seq.t_Seq ((v_T)))=>
      eq_inner (core.clone.Clone__f_clone (self)) (core.clone.Clone__f_clone (other));
    implaabbcc_t_PartialEq_impl__f_ne := fun  (self : hax_core.base.spec.seq.t_Seq ((v_T))) (other : hax_core.base.spec.seq.t_Seq ((v_T)))=>
      core.ops.bit.Not__f_not (eq_inner (core.clone.Clone__f_clone (self)) (core.clone.Clone__f_clone (other)));
  }.

Fixpoint get_index_unary `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (l : hax_core.base.spec.seq.t_Seq ((v_T))) (i : hax_core.base.spec.unary.t_Unary) `{hax_core.base.pos.haxint_lt (hax_core.base.spec.unary.unary_to_int (i)) (len (l)) = true} : v_T :=
  match hax_core.base.spec.unary.match_unary (i) with
  | hax_core.base.spec.unary.UNARY_ZERO =>
    hd (l)
  | hax_core.base.spec.unary.UNARY_SUCC (n) =>
    get_index_unary (tl (l)) (n)
  end.

Definition get_index `{v_T : Type} `{core.marker.t_Sized (v_T)} `{core.clone.t_Clone (v_T)} (s : hax_core.base.spec.seq.t_Seq ((v_T))) (i : hax_core.base.spec.haxint.t_HaxInt) `{hax_core.base.pos.haxint_lt (i) (len (s)) = true} : v_T :=
  get_index_unary (s) (hax_core.base.spec.unary.unary_from_int (i)).
