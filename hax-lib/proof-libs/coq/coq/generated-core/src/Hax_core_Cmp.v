(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)





Class t_PartialEq (v_Self : Type) (v_Rhs : Type) : Type :=
  {
    PartialEq__f_eq : v_Self -> v_Rhs -> bool;
    PartialEq__f_ne : v_Self -> v_Rhs -> bool;
  }.
Arguments t_PartialEq (_) (_).

Inductive t_Ordering : Type :=
| Ordering_Less
| Ordering_Equal
| Ordering_Greater.




Definition anon_const_Ordering_Less__anon_const_0 : t_i8 :=
  (-1 : t_i8).

Definition anon_const_Ordering_Equal__anon_const_0 : t_i8 :=
  (0 : t_i8).

Definition anon_const_Ordering_Greater__anon_const_0 : t_i8 :=
  (1 : t_i8).

Definition t_Ordering_cast_to_repr (x : t_Ordering) : t_i8 :=
  match x with
  | Ordering_Less =>
    anon_const_Ordering_Less__anon_const_0
  | Ordering_Equal =>
    anon_const_Ordering_Equal__anon_const_0
  | Ordering_Greater =>
    anon_const_Ordering_Greater__anon_const_0
  end.







Definition impl_Ordering__is_eq (self : t_Ordering) : bool :=
  match self with
  | Ordering_Equal =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition impl_Ordering__is_ne (self : t_Ordering) : bool :=
  core.ops.bit.Not__f_not (match self with
  | Ordering_Equal =>
    (true : bool)
  | _ =>
    (false : bool)
  end).

Definition impl_Ordering__is_lt (self : t_Ordering) : bool :=
  match self with
  | Ordering_Less =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition impl_Ordering__is_gt (self : t_Ordering) : bool :=
  match self with
  | Ordering_Greater =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Definition impl_Ordering__is_le (self : t_Ordering) : bool :=
  core.ops.bit.Not__f_not (match self with
  | Ordering_Greater =>
    (true : bool)
  | _ =>
    (false : bool)
  end).

Definition impl_Ordering__is_ge (self : t_Ordering) : bool :=
  core.ops.bit.Not__f_not (match self with
  | Ordering_Less =>
    (true : bool)
  | _ =>
    (false : bool)
  end).

Definition impl_Ordering__reverse (self : t_Ordering) : t_Ordering :=
  match self with
  | Ordering_Less =>
    Ordering_Greater
  | Ordering_Equal =>
    Ordering_Equal
  | Ordering_Greater =>
    Ordering_Less
  end.

Class t_PartialOrd (v_Self : Type) (v_Rhs : Type) `{t_PartialEq (v_Self) (v_Rhs)} : Type :=
  {
    PartialOrd__f_partial_cmp : v_Self -> v_Rhs -> core.option.t_Option ((t_Ordering));
    PartialOrd__f_lt : v_Self -> v_Rhs -> bool;
    PartialOrd__f_le : v_Self -> v_Rhs -> bool;
    PartialOrd__f_gt : v_Self -> v_Rhs -> bool;
    PartialOrd__f_ge : v_Self -> v_Rhs -> bool;
  }.
Arguments t_PartialOrd (_) (_) {_}.

Instance t_PartialEq_359677597 : t_PartialEq ((t_Ordering)) ((t_Ordering)) :=
  {
    implaabbcc_t_PartialEq_impl_1__f_eq := fun  (self : t_Ordering) (other : t_Ordering)=>
      match self with
      | Ordering_Less =>
        match other with
        | Ordering_Less =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      | Ordering_Equal =>
        match other with
        | Ordering_Equal =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      | Ordering_Greater =>
        match other with
        | Ordering_Greater =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      end;
    implaabbcc_t_PartialEq_impl_1__f_ne := fun  (self : t_Ordering) (other : t_Ordering)=>
      core.ops.bit.Not__f_not (match self with
      | Ordering_Less =>
        match other with
        | Ordering_Less =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      | Ordering_Equal =>
        match other with
        | Ordering_Equal =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      | Ordering_Greater =>
        match other with
        | Ordering_Greater =>
          (true : bool)
        | _ =>
          (false : bool)
        end
      end);
  }.

TODO: please implement the method `item'_HaxError`

Class t_Ord (v_Self : Type) `{t_Eq (v_Self)} `{t_PartialOrd (v_Self) (v_Self)} : Type :=
  {
    Ord__f_cmp : v_Self -> v_Self -> t_Ordering;
  }.
Arguments t_Ord (_) {_} {_}.
