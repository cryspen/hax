(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core_Base_Spec_Binary_Positive.
From Core Require Import Core_Cmp.

(* NotImplementedYet *)





Fixpoint positive_cmp__cmp_binary_cont (x : Core_Base_Spec_Binary_Positive.t_Positive) (y : Core_Base_Spec_Binary_Positive.t_Positive) (r : Core_Cmp.t_Ordering) : Core_Cmp.t_Ordering :=
  match Core_Base_Spec_Binary_Positive.match_positive (x) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (y) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      r
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Cmp.Ordering_Less
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (y) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Cmp.Ordering_Greater
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      positive_cmp__cmp_binary_cont (p) (q) (r)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      positive_cmp__cmp_binary_cont (p) (q) (Core_Cmp.Ordering_Less)
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (y) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Cmp.Ordering_Greater
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      positive_cmp__cmp_binary_cont (p) (q) (Core_Cmp.Ordering_Greater)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      positive_cmp__cmp_binary_cont (p) (q) (r)
    end
  end.

Fixpoint positive_succ (s : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (s) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    Core_Base_Spec_Binary_Positive.xO (Core_Base_Spec_Binary_Positive.xH)
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
    Core_Base_Spec_Binary_Positive.xI (q)
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
    Core_Base_Spec_Binary_Positive.xO (positive_succ (q))
  end.

Fixpoint positive_pred_double (s : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (s) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    Core_Base_Spec_Binary_Positive.xH
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    Core_Base_Spec_Binary_Positive.xI (positive_pred_double (p))
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    Core_Base_Spec_Binary_Positive.xI (Core_Base_Spec_Binary_Positive.xO (p))
  end.

Definition positive_cmp (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Cmp.t_Ordering :=
  positive_cmp__cmp_binary_cont (lhs) (rhs) (Core_Cmp.Ordering_Equal).

Definition positive_le (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : bool :=
  match Core_Option.Option_Some (positive_cmp (lhs) (rhs)) with
  | Core_Option.Option_Some (Core_Cmp.Ordering_Less
  | Core_Cmp.Ordering_Equal) =>
    (true : bool)
  | _ =>
    (false : bool)
  end.

Fixpoint positive_add__add (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xO (Core_Base_Spec_Binary_Positive.xH)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xI (q)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_succ (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xI (p)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_add__add (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (positive_add__add (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xO (positive_succ (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xI (positive_add__add (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_add__add_carry (p) (q))
    end
  end
with positive_add__add_carry (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xI (Core_Base_Spec_Binary_Positive.xH)
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_succ (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (positive_succ (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xO (positive_succ (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xI (positive_add__add (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_add__add_carry (p) (q))
    end
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    match Core_Base_Spec_Binary_Positive.match_positive (rhs) with
    | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
      Core_Base_Spec_Binary_Positive.xI (positive_succ (p))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XO (q) =>
      Core_Base_Spec_Binary_Positive.xO (positive_add__add_carry (p) (q))
    | Core_Base_Spec_Binary_Positive.POSITIVE_XI (q) =>
      Core_Base_Spec_Binary_Positive.xI (positive_add__add_carry (p) (q))
    end
  end.

Definition positive_add (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  positive_add__add (lhs) (rhs).

Fixpoint positive_mul (lhs : Core_Base_Spec_Binary_Positive.t_Positive) (rhs : Core_Base_Spec_Binary_Positive.t_Positive) : Core_Base_Spec_Binary_Positive.t_Positive :=
  match Core_Base_Spec_Binary_Positive.match_positive (lhs) with
  | Core_Base_Spec_Binary_Positive.POSITIVE_XH =>
    rhs
  | Core_Base_Spec_Binary_Positive.POSITIVE_XO (p) =>
    Core_Base_Spec_Binary_Positive.xO (positive_mul (p) (rhs))
  | Core_Base_Spec_Binary_Positive.POSITIVE_XI (p) =>
    positive_add (Core_Clone.Clone__f_clone (rhs)) (Core_Base_Spec_Binary_Positive.xO (positive_mul (p) (rhs)))
  end.
