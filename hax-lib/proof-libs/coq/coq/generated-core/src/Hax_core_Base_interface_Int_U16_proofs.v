(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)



Lemma abstract_concretize_cancel (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (hax_core.base_interface.coerce.Concretization__f_concretize (hax_core.base_interface.coerce.Abstraction__f_lift (core.clone.Clone__f_clone (x)))) (x) = true.
Proof. Admitted.

Lemma addC (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.ops.arith.Add__f_add (y) (x)) = true.
Proof. Admitted.

Lemma addA (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (x)) (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (y)) (core.clone.Clone__f_clone (z)))) (core.ops.arith.Add__f_add (core.ops.arith.Add__f_add (x) (y)) (z)) = true.
Proof. Admitted.

Lemma add_0_r (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (x)) (hax_core.base_interface.int.Constants__f_ZERO)) (x) = true.
Proof. Admitted.

Lemma add_0_l (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Add__f_add (hax_core.base_interface.int.Constants__f_ZERO) (core.clone.Clone__f_clone (x))) (x) = true.
Proof. Admitted.

Lemma neg_idemp (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Neg__f_neg (core.ops.arith.Neg__f_neg (core.clone.Clone__f_clone (x)))) (x) = true.
Proof. Admitted.

Lemma sub_is (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.ops.arith.Add__f_add (x) (core.ops.arith.Neg__f_neg (y))) = true.
Proof. Admitted.

Lemma sub_distr (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (x)) (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (y)) (core.clone.Clone__f_clone (z)))) (core.ops.arith.Add__f_add (x) (core.ops.arith.Add__f_add (core.ops.arith.Neg__f_neg (y)) (core.ops.arith.Neg__f_neg (z)))) = true.
Proof. Admitted.

Lemma addN (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (x)) (x)) (hax_core.base_interface.int.Constants__f_ZERO) = true.
Proof. Admitted.

Lemma mul_1_r (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (hax_core.base_interface.int.Constants__f_ONE)) (x) = true.
Proof. Admitted.

Lemma mul_1_l (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Mul__f_mul (hax_core.base_interface.int.Constants__f_ONE) (core.clone.Clone__f_clone (x))) (x) = true.
Proof. Admitted.

Lemma mulC (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.ops.arith.Mul__f_mul (y) (x)) = true.
Proof. Admitted.

Lemma mulA (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (y)) (core.clone.Clone__f_clone (z)))) (core.ops.arith.Mul__f_mul (core.ops.arith.Mul__f_mul (x) (y)) (z)) = true.
Proof. Admitted.

Lemma mul_distr (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (y)) (core.clone.Clone__f_clone (z)))) (core.ops.arith.Add__f_add (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (y)) (core.ops.arith.Mul__f_mul (x) (z))) = true.
Proof. Admitted.

Lemma mul_opp (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Neg__f_neg (core.clone.Clone__f_clone (x))) (core.ops.arith.Mul__f_mul (core.ops.arith.Neg__f_neg (hax_core.base_interface.int.Constants__f_ONE)) (x)) = true.
Proof. Admitted.

Lemma div_1_r (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Div__f_div (core.clone.Clone__f_clone (x)) (hax_core.base_interface.int.Constants__f_ONE)) (x) = true.
Proof. Admitted.

Lemma shl_1_ (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.bit.Shl__f_shl (core.clone.Clone__f_clone (x)) (hax_core.base_interface.int.Constants__f_ONE)) (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (x)) (x)) = true.
Proof. Admitted.

Lemma shr_1_ (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.bit.Shr__f_shr (core.clone.Clone__f_clone (x)) (hax_core.base_interface.int.Constants__f_ONE)) (core.ops.arith.Div__f_div (core.clone.Clone__f_clone (x)) (core.ops.arith.Add__f_add (hax_core.base_interface.int.Constants__f_ONE) (hax_core.base_interface.int.Constants__f_ONE))) = true.
Proof. Admitted.

Lemma mod_small (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) :
   ->
  orb (core.cmp.PartialOrd__f_ge (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (core.clone.Clone__f_clone (x)) (y)) (x)) = true.
Proof. Admitted.

Lemma int_range (x : hax_core.base_interface.int.t_U16) :
   ->
  andb (core.cmp.PartialOrd__f_le (hax_core.base_interface.int.Constants__f_MIN) (core.clone.Clone__f_clone (x))) (core.cmp.PartialOrd__f_le (x) (hax_core.base_interface.int.Constants__f_MAX)) = true.
Proof. Admitted.

Lemma mod_one (x : hax_core.base_interface.int.t_U16) :
   ->
  core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (x) (hax_core.base_interface.int.Constants__f_ONE)) (hax_core.base_interface.int.Constants__f_ZERO) = true.
Proof. Admitted.

Lemma mod_add (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  orb (hax_core.base.pos.haxint_le (hax_core.base.spec.constants.v_WORDSIZE_16_) (hax_core.base.pos.haxint_add (hax_core.base_interface.coerce.Abstraction__f_lift (core.clone.Clone__f_clone (x))) (hax_core.base_interface.coerce.Abstraction__f_lift (core.clone.Clone__f_clone (y))))) (core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (core.ops.arith.Add__f_add (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.clone.Clone__f_clone (z))) (core.ops.arith.Rem__f_rem (core.ops.arith.Add__f_add (core.ops.arith.Rem__f_rem (x) (core.clone.Clone__f_clone (z))) (core.ops.arith.Rem__f_rem (y) (core.clone.Clone__f_clone (z)))) (z))) = true.
Proof. Admitted.

Lemma mod_sub (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  orb (orb (core.cmp.PartialOrd__f_lt (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.cmp.PartialOrd__f_le (core.clone.Clone__f_clone (z)) (core.clone.Clone__f_clone (x)))) (core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (core.ops.arith.Sub__f_sub (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.clone.Clone__f_clone (z))) (core.ops.arith.Rem__f_rem (core.ops.arith.Sub__f_sub (core.ops.arith.Rem__f_rem (x) (core.clone.Clone__f_clone (z))) (core.ops.arith.Rem__f_rem (y) (core.clone.Clone__f_clone (z)))) (z))) = true.
Proof. Admitted.

Lemma mod_mul (x : hax_core.base_interface.int.t_U16) (y : hax_core.base_interface.int.t_U16) (z : hax_core.base_interface.int.t_U16) :
   ->
  orb (hax_core.base.pos.haxint_lt (hax_core.base.spec.constants.v_WORDSIZE_16_) (hax_core.base.pos.haxint_mul (hax_core.base_interface.coerce.Abstraction__f_lift (core.clone.Clone__f_clone (x))) (hax_core.base_interface.coerce.Abstraction__f_lift (core.clone.Clone__f_clone (y))))) (core.cmp.PartialEq__f_eq (core.ops.arith.Rem__f_rem (core.ops.arith.Mul__f_mul (core.clone.Clone__f_clone (x)) (core.clone.Clone__f_clone (y))) (core.clone.Clone__f_clone (z))) (core.ops.arith.Rem__f_rem (core.ops.arith.Rem__f_rem (core.ops.arith.Mul__f_mul (core.ops.arith.Rem__f_rem (x) (core.clone.Clone__f_clone (z))) (y)) (core.clone.Clone__f_clone (z))) (z))) = true.
Proof. Admitted.
